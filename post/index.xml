<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ざる魂</title>
    <link>https://zarudama.github.io/post/</link>
    <description>Recent content in Posts on ざる魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 17 Dec 2018 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://zarudama.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>libgdx</title>
      <link>https://zarudama.github.io/post/2018/12/libgdx/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0900</pubDate>
      
      <guid>https://zarudama.github.io/post/2018/12/libgdx/</guid>
      <description>はじめに libGDX は、Javaでゲームを作るためのライブラリです。マルチプラットフォーム対応で、PC(Windows,Linux,Mac), Android, iOS, HTMLに対応しています。
libGDXは、日本での知名度はイマイチのようですが、海外ではかなり人気があるようです。実際、ググってみると、英語のドキュメントは沢山みかけますが、日本語のドキュメントはまだまだ少数です。
また、公式ドキュメントも大変充実しています(英語のみ)。
 https://github.com/libgdx/libgdx/wiki  実のところこのドキュメントを読めば大抵の事は解決します。
ただ、私もそうなんですが、日本語情報がないってだけで、重い腰が上がらないって人も多いと思います。そんな人向けに(というより自分の勉強ついでに)、そして少しでもlibGDXを使用する人が増えることを願い、少しずつ記事を書いていこうと思います。
この記事が、libGDXを学ぶためのきっかけになって頂ければ幸いです。
その2は こちら。
このシリーズの目次は こちら 。
プロジェクトを作る libGDXでは、専用のプロジェクト生成アプリが用意されています。マルチプラットフォームの性質上、プロジェクトの構成が複雑なので素直にこのアプリを使用したほうが良いかと思います。
 http://libgdx.badlogicgames.com/download.html  起動は、以下のような感じです。Windowsならばダブルクリックで起動できるでしょう。
$ java -jar gdx-setup.jar Usage: GdxSetup --dir &amp;lt;dir-name&amp;gt; --name &amp;lt;app-name&amp;gt; --package &amp;lt;package&amp;gt; --mainClass &amp;lt;mainClass&amp;gt; --sdkLocation &amp;lt;SDKLocation&amp;gt; dir ... the directory to write the project files to name ... the name of the application package ... the Java package name of the application mainClass ... the name of your main ApplicationListener sdkLocation .</description>
    </item>
    
    <item>
      <title>libgdx2</title>
      <link>https://zarudama.github.io/post/2018/12/libgdx2/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0900</pubDate>
      
      <guid>https://zarudama.github.io/post/2018/12/libgdx2/</guid>
      <description>はじめに libGDX を勉強するついでに解説記事を書く シリーズ 2回目です。
前回 は、プロジェクトを作って、以下のことを学びました。
 画像の表示 キーボードによる操作 BGMの再生 効果音の再生  今回は次のことを学びます。
 物理画面に依存しない画面表示 タッチ処理  物理画面に依存しない画面表示 物理画面とは何でしょうか？ここでは次のように定義します。
 スマホやタブレット画面解像度 デスクトップのウィンドウサイズ  Androidには様々な画面サイズがありますし、 iPhoneもモデルチェンジ毎に画面サイズが変化しています。これら様々な画面サイズのことを考慮しないと、意図した通りの画面が表示できません。
ゲームを作るときの基本として、物理画面でプログラムしないというのがあります。物理的なディスプレイのサイズに依存した座標管理をすると、移植性が下がり仕様変更に弱くなったり、端末毎の画面サイズの違いを吸収できないプログラムになってしまいます。
例えば横スクロールアクションを作ったときに、 Aさんの画面は小さいから敵の動きがところ狭しとなるところが、 Bさんの端末だと画面が大きいからフィールドが遠くまで見わたせて楽々プレイできる、なんてことが発生します。端末によって難易度が変わってくるのです。
  Figure 1: 端末の小さいAさんは、端末の大きいBさんより不利になる
  実は既にこの問題は、私の手元で発生しています。下記は、Nexus7(2013)で表示したサンプルの画面です。
  Figure 2: nexus7の画面
    Figure 3: PC版の画面
  Nexus7版は、PCの画面と全然違いますね。キャラクターや文字が非常に小さくなってます。これはPC版が640x480の解像度なのに対して、Nexus7版は1920x1200の解像度で表示しているからです。この状態でゲームを作ってしまったら全然別ものになってしまいますよね。ちなみにMac持ってないのでiOS系ではどうなるかわかりません。
というわけで、どの端末でも公平に画面表示できるようにひと工夫必要になってきます (こういう処理は、ゲームづくりの序盤でやっておかないと、あとから変更するのは大変なのでさっさと済ませておきたいことのひとつですね)。
カメラとビューポート ではどうやってこの問題を解決するか。それにはカメラとビューポートを使用します。
カメラとは、ゲームの世界を現実世界のディスプレイに届けるためのオブジェクトです。
ビューポートとは、カメラの捉えたゲームの世界を、ディスプレイのどこに表示するかを決める枠(矩形領域)のことです。
  Figure 4: カメラとビューポート
  ビューポートは、ディスプレイサイズと一致しているわけではないことに注意してください。ゲームのサンプルなどだと一致していることが多いですが、今回のように様々なディスプレイサイズに対応させる場合は、一致しなくなることの方が多くなるはずです。また、他の使い方としては、カメラを2つ用意して一方はゲーム画面、一方は小さな枠で別のシーンを表示するなんてこともできるかもしれません(やったことないですが)。
カメラを使うことにより、カメラとして定義した論理空間でゲームを制御できます。この空間でやりとりすれば、あとはlibGDXがよろしく画面に表示してくれるわけです。カメラでできることを列挙してみます。
 物理的な画面サイズを気にせず、自分の定義した画面サイズでゲームを構築できる ズームイン、ズームアウト、画面を回転させたり、揺らしたりなど、画面全体にかかるエフェクトが簡単にできる カメラを動かすことで、スクロール処理が簡単に実装できる  カメラを導入することでこのような自由が手に入るわけですが、その代償として操作が複雑になってしまうのも事実です。コーディング中は、今自分がどこの座標系で何を操作しているかを常に意識する必要があります。ちょっと大袈裟ですが、慣れれば大したことありません。またこの考えはそのまま3Dプログラミングにも繋がります。</description>
    </item>
    
  </channel>
</rss>