<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>libgdx on ざる魂</title>
    <link>https://zarudama.github.io/tags/libgdx/</link>
    <description>Recent content in libgdx on ざる魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 08 Nov 2019 16:32:00 +0900</lastBuildDate>
    
	<atom:link href="https://zarudama.github.io/tags/libgdx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Emacs JDEE でlibGDXプログラミング!</title>
      <link>https://zarudama.github.io/post/2014/05/libgdx_emacs/</link>
      <pubDate>Fri, 08 Nov 2019 16:32:00 +0900</pubDate>
      
      <guid>https://zarudama.github.io/post/2014/05/libgdx_emacs/</guid>
      <description>&amp;#30446;&amp;#27425;  はじめに gradleプロジェクトをJDEEでも使えるようにする   
はじめに libGDX でゲームプログラミングを始めています。
最初は、Eclipseでコーディングしていました。
でも重すぎるので、軽いと評判のIntelliJ IDEAに乘りかえました。
確かに快適でした。Eclipseよりは。しかしそれでもいろいろ不満がつのる。。。
…結局、Emacsに戻ってきました。やはり最後はいつもの場所へ。悲しい性ですね。
ということで、EmacsでJavaやるなら JDEE です。
gradleプロジェクトをJDEEでも使えるようにする JDEEはgradleをサポートしてません。でもやっぱりいるんですねー。すばらしき先人が。 GradleプロジェクトをJDEEの plj.el に変換するスクリプトを発見しました。
 http://ignatyev-dev.blogspot.jp/2013/07/gradle-projects-in-jdee.html  上記で紹介されている jdee.gradle を、libGDXのプロジェクトルートに配置します。そのままだと、testディレクトリがないと怒られるので、testを含む行をコメントアウトします。
更に build.gradle を編集し、 apply from:... を追加します。
} } +apply from:&amp;#39;jdee.gradle&amp;#39; allprojects { apply plugin: &amp;#34;eclipse&amp;#34; apply plugin: &amp;#34;idea&amp;#34; あとは、プロジェクトルートで下記コマンドを実行します。
$ ./gradlew jdee すると各サブプロジェクト内で、 prj.el が作成されます。
最後に下記の plj.el をプロジェクトルートに配置します。
(jde-project-file-version &amp;#34;1.0&amp;#34;) (jde-set-variables &amp;#39;(jde-jdk (quote (&amp;#34;1.7&amp;#34;))) &amp;#39;(jde-jdk-registry (quote ( ;;(&amp;#34;1.7&amp;#34; . &amp;#34;c:/Program Files/Java/jdk1.</description>
    </item>
    
    <item>
      <title>libGDX入門 その01 画像を表示したり音を鳴らしたり</title>
      <link>https://zarudama.github.io/post/2014/05/libgdx01/</link>
      <pubDate>Fri, 08 Nov 2019 16:24:00 +0900</pubDate>
      
      <guid>https://zarudama.github.io/post/2014/05/libgdx01/</guid>
      <description>&amp;#30446;&amp;#27425;  はじめに プロジェクトを作る  注意点  IntelliJで使う  プロジェクトのインポート PC版を動かす Android版を動かす HTML版を動かす  Eclipseで使う  Gradleプラグインのインストール プロジェクトのインポート PC版を動かす Android版を動かす HTML版を動かす  コマンドラインで使う  PC版を動かす Android版を動かす HTML版を動かす  基本的なクラスについて 文字表示 スプライトクラスを使用する。 座標系 画像を動かす 効果音を鳴らす BGMを鳴らす 画像を拡大・縮小・回転してみる ソース おわりに 参考書籍   
はじめに libGDX は、Javaでゲームを作るためのライブラリです。マルチプラットフォーム対応で、PC(Windows/Linux/Mac), Android, iOS, HTMLに対応しています。
libGDXは、日本での知名度はイマイチのようですが、海外ではかなり人気があるようです。実際、ググってみると、英語のドキュメントは沢山みかけますが、日本語のドキュメントはまだまだ少数です。ただし、公式ドキュメントは大変充実しています(英語のみ)。
 https://github.com/libgdx/libgdx/wiki  実のところこのドキュメントを読めば大抵の事は解決します。
ただ、私もそうなんですが、日本語情報がないってだけで、重い腰が上がらないって人も多いと思います。そんな人向けに(というより自分の勉強ついでに)、そして少しでもlibGDXを使用する人が増えることを願い、少しずつ記事を書いていこうと思います。
この記事が、libGDXを学ぶためのきっかけになって頂ければ幸いです。
その2は こちら。
このシリーズの目次は こちら 。
プロジェクトを作る libGDXでは、専用のプロジェクト生成アプリが用意されています。マルチプラットフォームの性質上、プロジェクトの構成が複雑なので素直にこのアプリを使用したほうが良いかと思います。
 http://libgdx.badlogicgames.com/download.html  起動は、以下のような感じです。Windowsならばダブルクリックで起動できるでしょう。
$ java -jar gdx-setup.</description>
    </item>
    
    <item>
      <title>libGDX入門 その02 カメラとビューポート</title>
      <link>https://zarudama.github.io/post/2014/06/libgdx02/</link>
      <pubDate>Fri, 08 Nov 2019 16:24:00 +0900</pubDate>
      
      <guid>https://zarudama.github.io/post/2014/06/libgdx02/</guid>
      <description>&amp;#30446;&amp;#27425;  はじめに 物理画面に依存しない画面表示 カメラとビューポート 実際のコーディング  カメラの導入 ビューポートの導入  背景の追加 カメラの位置調整  ワールド軸の描画 setToOrthメソッド  カメラを動かす UI用カメラの導入  Windowサイズの変更  タッチ処理 ソース おわりに 参考URL 参考書籍 変更履歴   
はじめに libGDX を勉強するついでに解説記事を書く シリーズ 2回目です。
前回 は、プロジェクトを作って、以下のことを学びました。
 画像の表示 キーボードによる操作 BGMの再生 効果音の再生  今回は次のことを学びます。
 物理画面に依存しない画面表示 タッチ処理  物理画面に依存しない画面表示 物理画面とは何でしょうか？ここでは次のように定義します。
 スマホやタブレット画面解像度 デスクトップのウィンドウサイズ  Androidには様々な画面サイズがありますし、 iPhoneもモデルチェンジ毎に画面サイズが変化しています。これら様々な画面サイズのことを考慮しないと、意図した通りの画面が表示できません。
ゲームを作るときの基本として、物理画面でプログラムしないというのがあります。物理的なディスプレイのサイズに依存した座標管理をすると、移植性が下がり仕様変更に弱くなったり、端末毎の画面サイズの違いを吸収できないプログラムになってしまいます。
例えば横スクロールアクションを作ったときに、 Aさんの画面は小さいから敵の動きがところ狭しとなるところが、 Bさんの端末だと画面が大きいからフィールドが遠くまで見わたせて楽々プレイできる、なんてことが発生します。端末によって難易度が変わってくるのです。
  &amp;#22259;1: 端末の小さいAさんは、端末の大きいBさんより不利になる
  実は既にこの問題は、私の手元で発生しています。下記は、Nexus7(2013)で表示したサンプルの画面です。
  &amp;#22259;2: nexus7の画面</description>
    </item>
    
    <item>
      <title>libGDX入門 その03 ログ出力とアニメーションとバーチャルパッド</title>
      <link>https://zarudama.github.io/post/2014/06/libgdx03/</link>
      <pubDate>Fri, 08 Nov 2019 16:24:00 +0900</pubDate>
      
      <guid>https://zarudama.github.io/post/2014/06/libgdx03/</guid>
      <description>&amp;#30446;&amp;#27425;  はじめに ログの出しかた スプライトアニメーション バーチャルパッド テクスチャラップ ソースコード 今回の記事のアセット一覧  テクスチャ 背景 BGM  おわりに 参考書籍 変更履歴  2014/6/21  注釈   
はじめに tag libGDX libGDX入門 libGDX を勉強するついでに解説記事を書く シリーズ 3回目です。
前回 は、以下のことを学びました。
 カメラとビューポート タッチ処理  今回は次のことを学びます。
 ログ出力 スプライト表示のアニメーション テクスチャラップ バーチャルパッド  前回までは、最初の雛形コードに徐々にコードを継ぎたして完成させるというチュートリアル形式でしたが、実際にコードを入力しながら実行していくのは少ないんじゃないかという疑問と(自分も含めて)、記事を書くのが大変なので(手抜き)、最初に一気に解説し、最後にコードを載せるスタイルにします。
ログの出しかた プログラムの動作を追うとき、ログ出力はとても重宝しますよね。デバッガもいいですが、私は昔ながらのデバッグプリントで追うのが好きです。
ということで、ログ出力の方法を解説します。
公式から引用します。
Gdx.app.log(&amp;#34;MyTag&amp;#34;, &amp;#34;my informative message&amp;#34;); Gdx.app.error(&amp;#34;MyTag&amp;#34;, &amp;#34;my error message&amp;#34;, exception); Gdx.app.debug(&amp;#34;MyTag&amp;#34;, &amp;#34;my error message&amp;#34;); log メソッドは普通に情報を出力したい場合、 error メソッドは、例外を共なうようなエラー出力(第3引数にはException型)をしたい場合、 debug メソッドは開発時のみ出力したい場合に使用します。</description>
    </item>
    
    <item>
      <title>libGDX入門 その04 画面遷移</title>
      <link>https://zarudama.github.io/post/2014/06/libgdx04/</link>
      <pubDate>Fri, 08 Nov 2019 16:24:00 +0900</pubDate>
      
      <guid>https://zarudama.github.io/post/2014/06/libgdx04/</guid>
      <description>&amp;#30446;&amp;#27425;  はじめに ライフサイクルについて 画面遷移 Screenインタフェイス  show()とhide() dispose()  dispose()の方法  その1 hide() で解放する その2 Game#dispose() で全て解放する その3 Game クラスを拡張する  ゲームっぽい何か  ソースコードについて アセットの管理について  ゲーム中のフォントについて おわりに 参考書籍   
はじめに libGDX を勉強するついでに解説記事を書く シリーズ 4回目です。
前回 は、以下のことを学びました。
 ログ出力 スプライト表示のアニメーション テクスチャラップ バーチャルパッド  今回は、簡単なゲームを作ったので、その中の画面遷移を解説します。
ライフサイクルについて 今まであえて説明を避けてきたのですが(面倒そうなので←)、 Screenインタフェイスを扱うにあたり避けられそうもなかったので調査しました。
libGDXのライフサイクルと呼びだしメソッドの関係は以下のようになっています。
  &amp;#22259;1: libgdxのライフサイクル
  メソッドは、 ApplicationListener のものです。
注意して欲しいのは、PC版とAndroidで微妙に挙動が違うということです。特にPC版は、待機状態のときもrenderメソッドが呼ばれ続けるので注意が必要です。私はMacを持っていないのでわかりませんが、iOSも考慮したら更に違いがあるかもしれません。
   create() アプリケーションが新しく生成された時に呼ばれます。     resize() アプリケーションが新しく起動されたとき、PC版でウィンドウサイズが変化したとき、スマホ版で、端末の向きが変わったときなどに呼ばれます。   pause() スマホで電話が鳴った時やHome画面にした時、PC版でフォーカスが外れたときなどに呼ばれます。   resume() 待機状態から、ウィンドウがアクティブになった時に呼ばれます。   dispose() アプリケーションが破棄される時に呼ばれます。    ライフサイクルに関する情報は下記が非常に詳しいです。一読をお勧めします。</description>
    </item>
    
    <item>
      <title>libGDX入門 その05 ゲームデータの保存</title>
      <link>https://zarudama.github.io/post/2014/07/libgdx05/</link>
      <pubDate>Fri, 08 Nov 2019 16:24:00 +0900</pubDate>
      
      <guid>https://zarudama.github.io/post/2014/07/libgdx05/</guid>
      <description>&amp;#30446;&amp;#27425;  はじめに 注意 インスタンスの取得方法 値の書込みと読込み データを保存するタイミング 保存される場所 実際の実装例 ソースコード おわりに 参考書籍 注釈   
はじめに libGDX を勉強するついでに解説記事を書く シリーズ 5回目です。
前回 は、以下のことを学びました。
 Screenインタフェイスを使った画面遷移  今回は、前回作ったゲームに以下の機能を追加します。
 BGMのON/OFF機能 SEのON/OFF機能 HiScoreの表示  これらの情報は、ゲームを再開したときも保持していて欲しいですね。
そこで今回は、これら3つの情報を com.badlogic.gdx.Preferences というクラスを利用して保存していきます。
公式情報は下記にあります。
 https://github.com/libgdx/libgdx/wiki/Preferences http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/Preferences.html  注意 今回「ゲームデータの保存」というタイトルにしてしまいましたが、扱えるのはごく小さなデータのみです1。また、データはテキストとして保存されるので、ユーザーに改竄されて困るようなものは暗号化するなどの処置が必要です。
さらに、ゲーム中の複雑なデータを扱う場合は、データをシリアライズしたりして保存する必要があるかと思います。これらについては、今回は扱いません。
インスタンスの取得方法 下記で取得できます(公式からの引用)。
Preferences prefs = Gdx.app.getPreferences(&amp;#34;My Preferences&amp;#34;); 文字列の部分が名前になります。名前を変えればひとつのアプリで複数のインスタンスを扱えるようです。個人的にこの名前は、javaのパッケージ名が良いかと思います。 (ただしそれがユニークであるという保証がある場合のみ)
というのものPreferenceというのは、対象の端末全アプリの中でユニークである方が安全だからです。今回の例でいうと下記の名前になります。
Preferences prefs = Gdx.app.getPreferences(&amp;#34;com.zarudama.fishcatch&amp;#34;); この辺の考察は下記が詳しいので、一読をおすすめします。
 doc.tir.ne.jp/devel/clan/libgdx preferencesについて  値の書込みと読込み libGDXの Preferences は、Javaの標準クラスの java.util.prefs.Preferences や java.</description>
    </item>
    
  </channel>
</rss>