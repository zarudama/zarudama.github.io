<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xmonad on ざる魂</title>
    <link>https://zarudama.github.io/tags/xmonad/</link>
    <description>Recent content in xmonad on ざる魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 07 Aug 2013 14:01:39 +0900</lastBuildDate>
    <atom:link href="https://zarudama.github.io/tags/xmonad/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ubuntuでxmonadして、emacsでProcessingしてます</title>
      <link>https://zarudama.github.io/posts/ubuntuxmonademacsprocessing/</link>
      <pubDate>Wed, 07 Aug 2013 14:01:39 +0900</pubDate>
      <guid>https://zarudama.github.io/posts/ubuntuxmonademacsprocessing/</guid>
      <description>最近Processingをいじり始めました。&#xA;Ubuntu上のXmonadでemacs使ってProcessingしてるところ 上の画像は、Ubuntu上のXmonadでemacs使ってProcessingしてるところです。非常に快適です。&#xA;ちょろっと作った&#xA;&amp;lt;a href=&amp;#34;processings/hello&amp;#34;&amp;gt;テストプログラム&amp;lt;/a&amp;gt;&#xA;Javascriptモードで出力しました。こんなのが簡単に作れます。&#xA;日経LinuxでProcessingの連載をしていたので興味があったのですが、きちんと読んでいませんでした(今読みかえしているところです)。 最大のきっかけとなったのは下記の本を手にしたからです。&#xA;&amp;lt;a href=&amp;#34;http://www.amazon.co.jp/gp/product/4798038644/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4798038644&amp;amp;linkCode=as2&amp;amp;tag=ocha04-22&amp;#34;&amp;gt;&amp;lt;img border=&amp;#34;0&amp;#34; src=&amp;#34;http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4798038644&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=ocha04-22&amp;#34; &amp;gt;&amp;lt;/a&amp;gt;&amp;lt;img src=&amp;#34;http://ir-jp.amazon-adsystem.com/e/ir?t=ocha04-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=4798038644&amp;#34; width=&amp;#34;1&amp;#34; height=&amp;#34;1&amp;#34; border=&amp;#34;0&amp;#34; alt=&amp;#34;&amp;#34; style=&amp;#34;border:none !important; margin:0px !important;&amp;#34; /&amp;gt;&#xA;この本はゲームプログラミングはおろかプログラミングそのものが初めてという人のための本です。 事実、本の帯には「猫でも13歳でもわかる」みたいなことが書いてあります(笑)。 実際本の内容は懇切丁寧に書かれており、猫は無理でも中学生ならゲームが作れそうです。&#xA;初心者向けの本とはいえその内容は広範囲で、基本の2Dプログラミング、アイデアの出しかた、 データの作成、Andoroidアプリの公開方法、3Dプログラミング、そしてなんとキネクトプログラミングまでやってます。 自分はプログラミング初心者ではないですが、Processingをざっと勉強したいという経験者にもうってつけだと思います。&#xA;特にいいなと思ったのは、プログラマの最大の敵であるゲーム素材のつくり方まで解説してある点です。 プログラマは大抵絵心がなかったりするので、絵や音の素材を用意するのが苦手だと思うのですが、 この本はデータ作成にも多くのページを割いて解説しています。 また、本は分厚いですがそれぞれの章の独立生が割と高いので興味のあるところから読むってのもありかもです。&#xA;processing のおすすめポイント processingは実はjavaである。 文法はほとんどJavaなので実はしっかりした言語体系です。自分は最初、Processingという独自のスクリプト言語があるものと勘ちがいしていました。 でも実は、Processingという独自の言語があるわけではなく、Java言語をProcessingというIDEを通して簡単に始められるというものでした。 実際Processingでは普通にArrayListが使えますしジェネリクスも使えます。&#xA;Processingをイメージで簡単に説明すると、「Processingという巨大なクラスがあって、 このメソッドがグローバルな関数に見立てたAPIとなっていて、PDEという独自IDEによってあたかもグローバル関数や変数を簡単に定義できるようになっている。 PDEのおかげで、javaのパスとかメインクラスの作成とか面倒なことを考えずすぐに再生ボタンで実行できる環境」ってことになります (間違ってたらすみません)。 なのでJavaを実際に始める前にProcessingから入るというのは非常に有効な手段かと思います。&#xA;インストールが超簡単。 ダウンロードして展開するだけです。Java実行環境は同梱されてるので別途インストールする必要がありません。&#xA;複数のプラットホームに対応している。 作ったプログラムは、Linux, Mac, Windows向けにエクスポートできます。 出力されたものにJava実行環境も含まれているので配布先に別途Javaをインストールしてもらう必要もありません。&#xA;HTMLモード、androidモードがある。 昔のver1.5のころは、エクスポート方法としてアプレットがあったのですが、これはjavascriptに置きかわりました。 JavaAppletはいろいろ問題があるのでこの変更は嬉しいですね。 AndroidのエクスポートもSDKを別途ダウンロードする必要はあるものの非常に簡単にAndroidでプログラムを動かせます。&#xA;結局、サポートプラットホームは、Linux、Mac、Windwos、Android、そしてJavascriptになります (ただし最近のゲームライブラリはどれもこの辺サポートしてるのでアピールポイントにはなりにくくなってますね)。 問題は各モードでどこまで差異なく実行できるかですが、この辺はまだ検証できてません。 でも活動が活発なので期待です。&#xA;emacsでprocessing emacsからもProcessingを使えます。下記を参考にしました。&#xA;http://hoshi-sano.hatenablog.com/entry/2013/08/03/121526 MELPAに登録されているのでインスールも簡単です。 C-c C-p C-r で実行できますし、 エラーがあれば M-g M-n で簡単ジャンプできます。あとは javascript モードも対応してくれるといいな。</description>
    </item>
    <item>
      <title>python window tiler を試す</title>
      <link>https://zarudama.github.io/posts/python-window-tiler/</link>
      <pubDate>Tue, 29 Jan 2013 14:01:39 +0900</pubDate>
      <guid>https://zarudama.github.io/posts/python-window-tiler/</guid>
      <description>この記事 にxmonadがでてきたので、自分が普段使っているWindowsでもタイル 型マネージャを使いたくなった。実は以前にも何度か試したことがあったが、 どれもキーバインドが好みでなかったり動作が不安定だったりで、いまいち納 得のいくものがなかったので、使っていなかったのだ。でもその時から大分時 間も経ってるので、最近は何かないかなと調べたところPythonで実装されたそ の名もずばり「Python-windows-tiler」というものを見つけた。&#xA;https://github.com/Tzbob/python-windows-tiler http://d.hatena.ne.jp/uhiaha888/20121125/1353824257 使用方法は簡単で、バイナリを解凍してPWT.exeを実行するだけだが、パスに日 本語を含むとエラーになるのでルートに解凍するのが良いと思う。&#xA;キーバインディングはAwesomeなどと似ている。ただ、Altキーを使用するので Emacsとキーバインディングが被ってしまうのでconfig.iniを開き、altを全て winにしてPWT.exeを再起動した。&#xA;これでとりあえずEmacsとのキーバインディングの回避ができた。めでたしめで たし、と思ったのだが、Win+Lキーでウィンドウの横幅を広げようとしたらロッ ク画面になってしまう。。。&#xA;てことでWin+Lを無効化する方法を模索したけど、結局どれもうまくいかなかっ たので横幅操作は封印することにした。てか、Winを使用するコンビネーション キーはどれもWindowsに奪われてしまってうまくイカナイ。。。とはいえ、Win キー経由でタイル操作はとても使いやすい。多様する操作はこれ。&#xA;Win+SPC ウィンドウレイアウトの変更 Win+j, Win+k ALT+TABの代りになる Win+S+Ent プライマリの切替 Win+数字キー 仮想デスクトップの切替 Win+S+数字キー カレントアプリを仮想デスクトップへ移動 特にWin+j,kがイイ!&#xA;自宅のUbuntu環境ではStumpWMを使用していたが、これはEmacserにはなじみの あるキー操作なんだけど(Screen系のプリフィックスキーのあるやつ)、それが 逆に操作の混乱を生んでしまう。というのもの、自分の場合デスクトップの emacsでは windows.el を使用し、端末ではtmuxを使用してるので、タイル型 ウィンドウマネージャのキーバインドにプレフィックスを使用すると混乱する のだ。それにデスクトップのウィンドウ操作はできるだけすばやくしたいので Screen系のStumpWMよりAwesome系のほうがサクサク操作できる。以上から自分 にはAwesome系の操作体系のほうが向いているような気がした。&#xA;ということで、Ubuntuではxmonadをもう一度使ってみようと思う。</description>
    </item>
    <item>
      <title>xmonadを試す</title>
      <link>https://zarudama.github.io/posts/xmonad/</link>
      <pubDate>Fri, 28 Sep 2012 14:01:39 +0900</pubDate>
      <guid>https://zarudama.github.io/posts/xmonad/</guid>
      <description>CUIでtmuxを操作してるときの一覧できる快適さをGUIに求めた結果、 自宅のUbuntuにXmonadをいれてみました。&#xA;http://gihyo.jp/admin/serial/01/ubuntu-recipe/0124 タイル型のウィンドウマネージャです。常にウィンドウ全てが一覧されるやつです。 インストールしてみて実感しましたがタイル型はとーっても快適です。 普段からemacsでキーボード操作メインのユーザだったらすぐに気にいるかと思います。 とくにウィンドウ切り替えが Mod+j/k でできるのがイイ! (それに比べて WindowsのALT+tabは左手の手首が死ぬ。。。)&#xA;今回、Xmonadというのをインストールしましたが、老舗のawesomeというのも人気があるそうです。 ただXmonadの方が後発である分いろいろブラッシュアップされてるような印象でした。 問題は設定ファイルがHaskellってことですかね。できれば覚えたくないですよね。 いやHaskellは勉強して動かしたことはありますが、 今はLisp系言語を覚え中なので他の言語はできるだけ気にせず脳の負担を増やしたくないのです。 そういう意味で気になるのは、設定フィアルがCommonLispであるstumpwm。そのうち試したいと思います。&#xA;しかしタイル型使ってると、UnityとかgnomuShellの動向がどうでもよくなりますな。&#xA;インストールメモ $ sudo apt-get install xmonad $ sudo apt-get install dmenu # キーボードランチャー $ sudo apt-get install xmobar # ステータスバー xmorbar用の設定ファイル( ~/.xmobarrc )を作成する。&#xA;-- -*- mode:haskell -*- Config { font = &amp;#34;xft:Sans-9:bold&amp;#34; , bgColor = &amp;#34;black&amp;#34; , fgColor = &amp;#34;grey&amp;#34; , position = Top , lowerOnStart = False , commands = [ Run Network &amp;#34;eth0&amp;#34; [&amp;#34;-L&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;-H&amp;#34;,&amp;#34;32&amp;#34;,&amp;#34;--normal&amp;#34;,&amp;#34;green&amp;#34;,&amp;#34;--high&amp;#34;,&amp;#34;red&amp;#34;] 10 , Run Cpu [&amp;#34;-L&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;-H&amp;#34;,&amp;#34;50&amp;#34;,&amp;#34;--normal&amp;#34;,&amp;#34;green&amp;#34;,&amp;#34;--high&amp;#34;,&amp;#34;red&amp;#34;] 10 , Run Memory [&amp;#34;-t&amp;#34;,&amp;#34;Mem: &amp;lt;usedratio&amp;gt;%&amp;#34;] 10 , Run Swap [] 10 , Run Battery [] 600 , Run Com &amp;#34;lsb_release&amp;#34; [&amp;#34;-s&amp;#34;,&amp;#34;-d&amp;#34;] &amp;#34;&amp;#34; 36000 , Run Date &amp;#34;%Y %b %_d(%a) %H:%M:%S&amp;#34; &amp;#34;date&amp;#34; 10 ] , sepChar = &amp;#34;%&amp;#34; , alignSep = &amp;#34;}{&amp;#34; , template = &amp;#34;&amp;lt;fc=#ee9a00&amp;gt;%lsb_release%&amp;lt;/fc&amp;gt; | %cpu% | %memory% %swap% | %eth0% | %battery% }{ %date%&amp;#34; } ~/.</description>
    </item>
  </channel>
</rss>
