<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>skk on ざる魂</title>
    <link>https://zarudama.github.io/tags/skk/</link>
    <description>Recent content in skk on ざる魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 08 Nov 2019 20:14:00 +0900</lastBuildDate>
    
	<atom:link href="https://zarudama.github.io/tags/skk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SKKを導入してみる(WindowsXP)</title>
      <link>https://zarudama.github.io/post/2012/03/skk_windows/</link>
      <pubDate>Fri, 08 Nov 2019 20:14:00 +0900</pubDate>
      
      <guid>https://zarudama.github.io/post/2012/03/skk_windows/</guid>
      <description>去年からemacs上の日本語入力にはDDSKKを使い続けているのですが、 emacsの外の世界ではgooglIME(or MOZC)を使用していました。滅多に外の世界で活動しないため、別にこれで不自由はなかったのですが、ふと最近のWindwosSKK界隈を調べてみると、今までskkime 一択だったのにクライアントが増えてます!。。。ということでいくつか検証してみて最終的に下記の組み合わせを使用することにしました。快適!快適ー!
 corvus-SKK(IME) wceSKKServ(辞書サーバー) google-ime-skk(辞書サーバー)  ということで以下に調べた内容をメモしておきます。
corvus-SKK  最近できたらしいWindows用のFEP 辞書が独自形式  取り込みボタンを押したタイミングで辞書が独自形式に変換されるので、これは逆に長所になった。 emacs側のユーザー辞書を直接指定しても別ファイルになるので、クライアント単位で競合せずにすむ。  サーバーがひとつしか使えない  wceSKKServであれば、複数の辞書を扱えるので問題なし  トリガキーが「M-漢字キー」しかうけつけておらず、「漢字」キーのみでない 独自のサーバ(corvuserv)を使用しているが、まだ完成度が低そう。 StickyShiftが使える! Windows XPのテキストサービスフレームワーク(TSF)が不安定なため、XPでの利用はあまり推奨されない。  「;」によるStickyShiftを実現する方法  設定画面で[位置] タブで下記の設定を施す。   開始：; 代替：なし 送り：なし SKK日本語入力FEP  軽快な動作を目的とした比較的新しいWindows版SKK。 Windowsアプリを使いやすくするための独自機能が特徴。 SKK-IME1.5改 と同じ作者であり基本理念が引き継がれている。 WindowsXPのテキストサービスフレームワーク(TSF)が不安定なため、XPでの利用はあまり推奨されない。 WindowsXPで使用する場合は、SKK-IME1.5改を使用したほうが良い。  wceSKKServ  wceSKKServというサーバーを使って、ddskkと辞書の共有を図る。 wceSKKServで使用する辞書は、euc-jpしか受付ない模様。 サーバにはユーザ辞書は指定できない。 従って、ddskkで育てた辞書をskkIMEでも利用するということはできない。 どうしてもしたい場合は、コピーしたものを使う。 例えばスタートアップでユーザー辞書をコピーするとか。 サーバを使うメリットとしては、以下がある。  linux環境において辞書を共用することでメモリの節約 予めサーバーとして立ちあげておくことで、起動がスムーズになる サーバー側に複数の辞書を登録することで、クライアント側では、そのサーバーをひとつ設定するだけで複数の辞書を指定したことになり、設定が楽になる。   google-ime-skk 最近は、GoogleIMEが流行っているので、SKKをこのまま使い続けていいのか若干気の迷いがありましたが、 Google-IME-SKKの存在を知ってその不安もなくなりました。なぜなら、SKKからGoogleの辞書が使えるからです。この辞書のおかげで、ネットで話題の言葉とかも簡単に変換可能だし、ローカルの辞書でヒットしなかった場合でも大抵googleIMEが拾ってくれます。
また、Linux上のGoogleIMEであるMOZCの場合、確かネットのデータは反映されないのですが、このサーバを使えば、その問題も解決します。スバラシス!
xp環境でのインストール gemを入れてから下記でインストールする。
dos&amp;gt; gem install google-ime-skk dos&amp;gt; gem install json 下記のようなバッチファイルを作ってスタートアップに登録しておく。「gskk.</description>
    </item>
    
    <item>
      <title>uim-skkでsticky-shiftを実現する</title>
      <link>https://zarudama.github.io/post/2014/05/uim_skk/</link>
      <pubDate>Fri, 08 Nov 2019 17:23:00 +0900</pubDate>
      
      <guid>https://zarudama.github.io/post/2014/05/uim_skk/</guid>
      <description>Ubuntuを13.04から14.04にアップグレードしました。 Ubuntu界隈では、IMEがIBus1.5になり使いにくいと大荒れのようです。 IBus1.5では、IMEを切り替えるとキーボードの配置まで変わるらしく、特に英語キーボードを使ってたりするとストレスが半端ないようです。
私は、幸いにもuim-skkを使用していたので、この騒ぎを体験せずにすみました。やっぱりskkはおすすめですね。
そんな我が道をいくuim-skkですが、ひとつ問題がありました。それは、sticky-shiftの設定ができないとうことです。
私は、EmacsとWindowsのSKKFEPでは、セミコロンをSticky-Shiftとして設定しています。しかし、uim-skkには、設定ダイアログにそのような項目が見当たりません。公式ドキュメントには、対応したとはあるのですが、具体的な設定方法が見当りません。
 https://code.google.com/p/uim-doc-ja/wiki/RequestUimSolved#sticky%5Fshift%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84  2chに質問したりもしたのですが、特に反応もなく放置されたままでした。
 http://anago.2ch.net/test/read.cgi/software/1328329402/197  それでもやはりなんとかしたいと思い、 改めてドキュメントを読んでみると、 ~/.uim という設定ファイルの詳しい記述方法がありました。最初からもっと読んでおくべきでしたね。。。
 https://code.google.com/p/uim-doc-ja/wiki/CustomizeUim  そこで、そこの説明に載っているソース( /usr/share/uim/ )をgrepしてみると、それらしきカスタム変数が定義されていたのです。さっそく見よう見まねで ~/.uim を定義してみました。
(require-module &amp;#34;skk&amp;#34;) (define-key skk-sticky-key? &amp;#39;(&amp;#34;;&amp;#34;)) これでバッチリセミコロンでSticky-Shiftできました! uim-skkを使用している人はぜひ試してみてください。快適さが全然ちがいますよ。
以下わかったことをまとめておきます。
 基本は、GUIの設定ダイアログで設定する。 それで設定できないものは、 ~/.uim にSchemeで設定ファイルを記述する。 ダイアログとかぶる設定は、 ~/.uim が優先される。 端末を開き、uim-shを打ち込めば、uimのschemeのREPLが起動する。 (exit)で終了。    &amp;#22259;1: uim-shを起動したところ
  Schemeで設定できる UIM ってやっぱカッコいいな。</description>
    </item>
    
  </channel>
</rss>