<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on ざる魂</title>
    <link>https://zarudama.github.io/tags/javascript/</link>
    <description>Recent content in javascript on ざる魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 05 Jan 2024 19:41:39 +0900</lastBuildDate>
    <atom:link href="https://zarudama.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ゲームアルゴリズムレシピの練習と再実装</title>
      <link>https://zarudama.github.io/posts/javascript-recipe-study/</link>
      <pubDate>Fri, 05 Jan 2024 19:41:39 +0900</pubDate>
      <guid>https://zarudama.github.io/posts/javascript-recipe-study/</guid>
      <description> 「ゲームアルゴリズムレシピforJavaScript」という本を参考にして、 javascriptによるゲームプログラミングの練習をしています。&#xA;2008年発売と古いですが、平易な説明でわかりやすくサンプルも豊富で参考に なります。ただ、Javascriptのサンプルとしては書き方がちょっと古いので最 近の書き方に直しつつ、Canvasベースで再実装しながら勉強していきます。&#xA;作成したサンプル たくさんのスプライト(p71) たくさんのスプライト２(p71) ジャンプゲーム(p84) 今後使うかもしれないライブラリ候補 phinajs&#xA;https://phinajs.com/ 日本製なのでやりやすそう PixiJS&#xA;https://pixijs.com/ 自分でゲームライブラリを構築するときのグラフィックライブラリとして使う場合 PHASER&#xA;https://phaser.io/ PixiJSを使ったゲームライブラリ Three.js&#xA;https://threejs.org/ 3Dやるならとりあえずこれって感じ p5.js&#xA;https://p5js.org/ proccessingのjs版。お手軽2Dライブラリとして使うなら良さげ 今後の予定 本を読みながら自作ライブラリを作る 最終的にはマリオブラザーズを作る。 疑似3Dレースのサンプルも作る。 p113から 障害物の回転アニメーションを作る スプライト表示 キーボード判定 スプライト回転 CELL_YMAXのいちを確認 gameObjectの空きを取得すr仕組みがいまいち。 resetAnimの挙動がいまいち。 入力関係&#xA;マウス判定 タッチ操作判定 入力関係はisUp,isDown,isRight,isLeft,isAButton,isBbuttonというメソッドで、タッチ操作とキーボード操作をgameにまとめる。 バーチャルパッド対応 画面を縦長にする？ 音楽再生 FPS調整 スプライトがにじむ問題 screeの最大化 スプライト矩形切り出し&#xA;フォントスプライト機能 TileMap表示 p92から </description>
    </item>
    <item>
      <title>emacs &#43; SLIME &#43; node.js &#43; swank-js でemacsからブラウザ上のjavascriptを実行してみる</title>
      <link>https://zarudama.github.io/posts/emacs-slime-nodejs-swank-js-emacsjavascript/</link>
      <pubDate>Thu, 10 May 2012 14:01:39 +0900</pubDate>
      <guid>https://zarudama.github.io/posts/emacs-slime-nodejs-swank-js-emacsjavascript/</guid>
      <description> まず、Windows版のnode.jsをインストールしておく。インストーラなので簡単。 その後、npmでsocket.ioをインストール。&#xA;dos&amp;gt; npm install socket.io あとは、swank-jsをインストールする。&#xA;下記を参考にWindowsXP環境にインストールした。&#xA;http://e-arrows.sakura.ne.jp/2011/06/connect-to-nodejs-and-chrome-from-emacs.html 上記記事では、本家は更新が止っているとあるが、最近は更新を再開したっぽい。 もろもろバグフィックスがされているようなのでオリジナルからswank-jsを取得した。&#xA;https://github.com/swank-js/swank-js インストール方法などは表記のとおりすればOKだが、windowsなのでうまくlnコマンドの部分がうまくいかない。 回避方法としてswank-js.elはMarmaladeからインストールした。&#xA;M-x packagea-list-packages 下記を選択してixでインスール。&#xA;slime-js 0.0.1 installed Slime extension for swank-js. あとは裏でnode swank.jsを走らせて、SLIMEに接続する。&#xA;M-x slime-connect 127.0.0.1 4005 その後、repl上で接続したいURLを指定する。&#xA;,target-url 次にブラウザ上で下記にアクセスする。&#xA;http://localhost:8009/ その後、repl上で接続する。&#xA;,select-remote あとはrepl上で下記を実行するとlocalhost:8009上でjsが実行される。&#xA;alert (&amp;#34;hoge&amp;#34;) </description>
    </item>
  </channel>
</rss>
