<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PR on ざる魂</title>
    <link>https://zarudama.github.io/tags/pr/</link>
    <description>Recent content in PR on ざる魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 05 Jan 2024 23:16:39 +0900</lastBuildDate>
    <atom:link href="https://zarudama.github.io/tags/pr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「Androidゲームプログラミング A to Z 」レビュー</title>
      <link>https://zarudama.github.io/posts/android_gameprogramming_atoz/</link>
      <pubDate>Fri, 05 Jan 2024 23:16:39 +0900</pubDate>
      <guid>https://zarudama.github.io/posts/android_gameprogramming_atoz/</guid>
      <description>「Androidゲームプログラミング A to Z 」は libGDXの作者が書いた本です。&#xA;実践的かつ基本的で自分は退屈せずに読めました(特にMVCについての言及が良い)。 Androidでゲームを作るための基本を独自のフレームワーク作成を通して解説しています。&#xA;この本は、libGDXの解説はないけれど、その思想は当然libGDXにも引き継がれ ています。そのためlibGDXの理解もしやすくなります。libGDXをやるなら読ん でおいて損はないと思います。&#xA;また、Androidの本ではありますが、Androidスマホに特化したわけでもなく、 どんなハードのゲーム開発にも通用しそうな内容ばかりです。&#xA;そういう意味でこの本は、すべての初級ゲーム開発者におすすめできる本かと 思います。1&#xA;1 ただし一部内容が古いので注意してください(沢山売れて第2版が翻訳されればいいんですが)。</description>
    </item>
    <item>
      <title>ゲームアルゴリズムレシピの練習と再実装</title>
      <link>https://zarudama.github.io/posts/javascript-recipe-study/</link>
      <pubDate>Fri, 05 Jan 2024 19:41:39 +0900</pubDate>
      <guid>https://zarudama.github.io/posts/javascript-recipe-study/</guid>
      <description> 「ゲームアルゴリズムレシピforJavaScript」という本を参考にして、 javascriptによるゲームプログラミングの練習をしています。&#xA;2008年発売と古いですが、平易な説明でわかりやすくサンプルも豊富で参考に なります。ただ、Javascriptのサンプルとしては書き方がちょっと古いので最 近の書き方に直しつつ、Canvasベースで再実装しながら勉強していきます。&#xA;作成したサンプル たくさんのスプライト(p71) たくさんのスプライト２(p71) ジャンプゲーム(p84) 今後使うかもしれないライブラリ候補 phinajs&#xA;https://phinajs.com/ 日本製なのでやりやすそう PixiJS&#xA;https://pixijs.com/ 自分でゲームライブラリを構築するときのグラフィックライブラリとして使う場合 PHASER&#xA;https://phaser.io/ PixiJSを使ったゲームライブラリ Three.js&#xA;https://threejs.org/ 3Dやるならとりあえずこれって感じ p5.js&#xA;https://p5js.org/ proccessingのjs版。お手軽2Dライブラリとして使うなら良さげ 今後の予定 本を読みながら自作ライブラリを作る&#xA;ok:スプライト表示 ok:キーボード判定 ok:CELL_YMAXのいちを確認 スプライト回転 gameObjectの空きを取得する仕組みがいまいち。 resetAnimの挙動がいまいち。 入力関係&#xA;マウス判定 タッチ操作判定 入力関係はisUp,isDown,isRight,isLeft,isAButton,isBbuttonというメソッドで、タッチ操作とキーボード操作をgameにまとめる。 バーチャルパッド対応 画面を縦長にする？ 音楽再生 FPS調整 スプライトがにじむ問題 screeの最大化 スプライト矩形切り出し&#xA;フォントスプライト機能 TileMap表示 最終的にはマリオブラザーズを作る。 疑似3Dレースのサンプルも作る。 p77 「出会うと挨拶するキャラクター郡」から。&#xA;旗揚げのアニメーションを作る </description>
    </item>
    <item>
      <title>ubuntuでxmonadして、emacsでProcessingしてます</title>
      <link>https://zarudama.github.io/posts/ubuntuxmonademacsprocessing/</link>
      <pubDate>Wed, 07 Aug 2013 14:01:39 +0900</pubDate>
      <guid>https://zarudama.github.io/posts/ubuntuxmonademacsprocessing/</guid>
      <description>最近Processingをいじり始めました。&#xA;Ubuntu上のXmonadでemacs使ってProcessingしてるところ 上の画像は、Ubuntu上のXmonadでemacs使ってProcessingしてるところです。非常に快適です。&#xA;ちょろっと作った「テストプログラム」。&#xA;Javascriptモードで出力しました。こんなのが簡単に作れます。&#xA;日経LinuxでProcessingの連載をしていたので興味があったのですが、きちんと読んでいませんでした(今読みかえしているところです)。 最大のきっかけとなったのは下記の本を手にしたからです。&#xA;この本はゲームプログラミングはおろかプログラミングそのものが初めてという人のための本です。 事実、本の帯には「猫でも13歳でもわかる」みたいなことが書いてあります(笑)。 実際本の内容は懇切丁寧に書かれており、猫は無理でも中学生ならゲームが作れそうです。&#xA;初心者向けの本とはいえその内容は広範囲で、基本の2Dプログラミング、アイデアの出しかた、 データの作成、Andoroidアプリの公開方法、3Dプログラミング、そしてなんとキネクトプログラミングまでやってます。 自分はプログラミング初心者ではないですが、Processingをざっと勉強したいという経験者にもうってつけだと思います。&#xA;特にいいなと思ったのは、プログラマの最大の敵であるゲーム素材のつくり方まで解説してある点です。 プログラマは大抵絵心がなかったりするので、絵や音の素材を用意するのが苦手だと思うのですが、 この本はデータ作成にも多くのページを割いて解説しています。 また、本は分厚いですがそれぞれの章の独立生が割と高いので興味のあるところから読むってのもありです。&#xA;processing のおすすめポイント processingは実はjavaである。 文法はほとんどJavaなので実はしっかりした言語体系です。自分は最初、Processingという独自のスクリプト言語があるものと勘ちがいしていました。 でも実は、Processingという独自の言語があるわけではなく、Java言語をProcessingというIDEを通して簡単に始められるというものでした。 実際Processingでは普通にArrayListが使えますしジェネリクスも使えます。&#xA;Processingをイメージで簡単に説明すると、「Processingという巨大なクラスがあって、 このメソッドがグローバルな関数に見立てたAPIとなっていて、PDEという独自IDEによってあたかもグローバル関数や変数を簡単に定義できるようになっている。 PDEのおかげで、javaのパスとかメインクラスの作成とか面倒なことを考えずすぐに再生ボタンで実行できる環境」ってことになります (間違ってたらすみません)。 なのでJavaを実際に始める前にProcessingから入るというのは非常に有効な手段かと思います。&#xA;インストールが超簡単。 ダウンロードして展開するだけです。Java実行環境は同梱されてるので別途インストールする必要がありません。&#xA;複数のプラットホームに対応している。 作ったプログラムは、Linux, Mac, Windows向けにエクスポートできます。 出力されたものにJava実行環境も含まれているので配布先に別途Javaをインストールしてもらう必要もありません。&#xA;HTMLモード、androidモードがある。 昔のver1.5のころは、エクスポート方法としてアプレットがあったのですが、これはjavascriptに置きかわりました。 JavaAppletはいろいろ問題があるのでこの変更は嬉しいですね。 AndroidのエクスポートもSDKを別途ダウンロードする必要はあるものの非常に簡単にAndroidでプログラムを動かせます。&#xA;結局、サポートプラットホームは、Linux、Mac、Windwos、Android、そしてJavascriptになります (ただし最近のゲームライブラリはどれもこの辺サポートしてるのでアピールポイントにはなりにくくなってますね)。 問題は各モードでどこまで差異なく実行できるかですが、この辺はまだ検証できてません。 でも活動が活発なので期待です。&#xA;emacsでprocessing emacsからもProcessingを使えます。下記を参考にしました。&#xA;http://hoshi-sano.hatenablog.com/entry/2013/08/03/121526 MELPAに登録されているのでインスールも簡単です。 C-c C-p C-r で実行できますし、 エラーがあれば M-g M-n で簡単ジャンプできます。あとは javascript モードも対応してくれるといいな。&#xA;xmonadでprocessing 最後にXmonadでProcessingする方法を書いておきます。&#xA;Xmonad上では、JavaのSwingがまともに動かないみたいなので、 Processingするにはxmonadの設定ファイルを修正する必要があります。&#xA;~/.xmonad/xmonad.hs ファイルのlogHookを下記のように XMonad.Hooks.ICCCMFocus をインポートして、 logHook の右辺を takeTopFocus に置き換えます。</description>
    </item>
  </channel>
</rss>
