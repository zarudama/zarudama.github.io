<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ざる魂</title>
    <link>https://zarudama.github.io/</link>
    <description>Recent content on ざる魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 07 Jan 2024 23:05:39 +0900</lastBuildDate>
    
	<atom:link href="https://zarudama.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>約５年ぶりにサイトを更新し、ついでにリニューアルした</title>
      <link>https://zarudama.github.io/site-renewal2024/</link>
      <pubDate>Sun, 07 Jan 2024 23:05:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/site-renewal2024/</guid>
      <description>経緯 前回更新が2019年。仕事がクソ忙しくて調べ物をした記事。
2014年頃は頻繁に更新していたものの、別の趣味に夢中になり10年近くブログ更新は停止していた。 いやー長すぎだろ（笑）
今回久しぶりに時間が取れたので、2024年正月休みの時間を利用して放置していたgithub上のブログをリニューアルすることにした。 今どきの技術記事は、noteやqiita,zennなどで書くのがトレンドなんだろうけどorg-mode使ってデザインとか自前でいろいろやりたいので、Hugo使う！
Javascriptのゲーム作りとかMSXとかの記事も書けたらなーと思う。
どのように構築しているか 参考URL  Hugoを使用。 Hugoは標準でEmacsのorg-modeをサポートしており、mdファイルのかわりにorgファイルを使える。素晴らしい！ 全文検索は「くまくまノート」さまのサイトを参考に実装。ありがとうございます。 テーマは独自に記述。見た目はZennぽくしてみた。 ox-hugoを使わずに直接orgを使う話 https://mopemope.com/post/hugo-with-org/ hugoの使い方 https://knowledge.sakura.ad.jp/22908/  目次について 目次を入れる場合は下記を記述する。いらないときは記述しない
目次調査の経緯  hugoではorg-modeのtocをサポートしてないっぽい 下記では「#+toc: t」で表示されるとあるが、実際には反映しない https://discourse.gohugo.io/t/table-of-contents-for-org-mode-is-empty/6272/4 https://discourse.gohugo.io/t/toc-for-org-mode-missing/29899 どうもmarkdownパーサーが入れ替わったのでそのタイミングでデグレしたのかも。 org-modeは少数派なので、今後サポートされる可能性は低い。 以上から自前で実装する必要がある。 下記を参考にした https://toshikunblog.net/post/20200610/2020-0610/#google_vignette  </description>
    </item>
    
    <item>
      <title>「Androidゲームプログラミング A to Z 」レビュー</title>
      <link>https://zarudama.github.io/posts/android_gameprogramming_atoz/</link>
      <pubDate>Fri, 05 Jan 2024 23:16:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/android_gameprogramming_atoz/</guid>
      <description>「Androidゲームプログラミング A to Z 」は libGDXの作者が書いた本です。
実践的かつ基本的で自分は退屈せずに読めました(特にMVCについての言及が良い)。 Androidでゲームを作るための基本を独自のフレームワーク作成を通して解説しています。
この本は、libGDXの解説はないけれど、その思想は当然libGDXにも引き継がれ ています。そのためlibGDXの理解もしやすくなります。libGDXをやるなら読ん でおいて損はないと思います。
また、Androidの本ではありますが、Androidスマホに特化したわけでもなく、 どんなハードのゲーム開発にも通用しそうな内容ばかりです。
そういう意味でこの本は、すべての初級ゲーム開発者におすすめできる本かと 思います。1
/img/amazon_android_gameprogiraming_a_to_z.jpg
 ただし一部内容が古いので注意してください(沢山売れて第2版が翻訳されればいいんですが)。 [return]   </description>
    </item>
    
    <item>
      <title>ゲームアルゴリズムレシピの練習と再実装</title>
      <link>https://zarudama.github.io/posts/javascript-recipe-study/</link>
      <pubDate>Fri, 05 Jan 2024 19:41:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/javascript-recipe-study/</guid>
      <description>「ゲームアルゴリズムレシピforJavaScript」という本を参考にして、 javascriptによるゲームプログラミングの練習をしています。2008年発売と古 いですが、平易な説明でわかりやすくサンプルも豊富で参考になります。ただ、 Javascriptのサンプルとしては書き方がちょっと古いので最近の書き方に直し つつ、Canvasベースで再実装しながら勉強していきます。
/demo/javascript-recipe-study/image/recipe-book.jpg
作成したサンプル  たくさんのスプライト(p71)  たくさんのスプライト２(p71) ジャンプゲーム(p84)  今後使うかもしれないライブラリ候補  phinajs https://phinajs.com/ 日本製なのでやりやすそう PixiJS https://pixijs.com/ 自分でゲームライブラリを構築するときのグラフィックライブラリとして使う場合 PHASER https://phaser.io/ PixiJSを使ったゲームライブラリ Three.js https://threejs.org/ 3Dやるならとりあえずこれって感じ p5.js https://p5js.org/ proccessingのjs版。お手軽2Dライブラリとして使うなら良さげ  </description>
    </item>
    
    <item>
      <title>文字コードメモ</title>
      <link>https://zarudama.github.io/posts/moji-code/</link>
      <pubDate>Thu, 12 Dec 2019 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/moji-code/</guid>
      <description>文字とは 区点番号 符号化文字集合の種類 ASCII ISO/IEC 646 JIS X 201 ISO/IEC 2022 JIS X 208 EUC-JP, Shift_JIS ISO/IEC 8859(ISO-8859-1, Latin-1) ISO/IEC 10646(Unicode) JIS X 0212 JIS X 0213 符号化方式 問題のある文字 JIS X 208 の改定により区点が変わった文字 機種依存文字  文字の集合 符号化文字集合: 文字の集合に数字を割り当てたもの 文字コード: 文字に割り当てた数字 コードポイント: 符号化文字集合の表の位置のこと(コードポジションとも) JIS規格のコードポイントを表す 区は行、点は列を表す たとえば16行目6列目は、区番号16、点番号6、すなわち16区6点となる 列が上位ビット、行が下位ビットを表す 例) 小文字のzの場合 7bitで表現 7列目10行目 7/10 111/1010 0x7A 7bit アメリカの文字を表す。 7bit ASCIIをもとに国ごとに書き換えて良い文字を定義したもの 国ごとにある 7bit ISO/IEC 646 をもとにした日本の規格 バックスラッシュが円記号、チルダがアッパーバーになっている 8bit / 2byte ISO/IEC 646では国ひとつしか定義できないので複数の国の文字を混在できるようにした 8bitの場合、符号表が下記のように分類される CL領域(ControlLeft) 左側の制御文字 GL領域(GraphicLeft) 左側の図形文字 CR領域(ControlRight) 右側の制御文字 GR領域(GraphicRight) 右側の図形文字 図形文字とは通常の文字のこと 1byteでは漢字などを表現しきれない 2byte以上使うことでその欠点を解消 1byteで94文字使うことができる。2byte使うと 94x94 文字使うことができる。 2byte ISO/IEC 2022をモトにした日本の規格 8836文字扱える(常用漢字は2136文字なので十分) ASCIIとJIS X 208 の漢字を組み合わせたもの 8bit ヨーロッパで普及している ISO/IEC 646は国ごとの定義だったものが、8859では地域ごとの定義に拡大 GLにASCII GRに各国の固有の文字集合 ISO/IEC 8859-1は通称 Latin-1とも呼ばれ欧米を中心に使用されている。 ISO/IEC 10646: ISOが規格したもの Unicode: 企業が規格したもの 両者は統合される 当初16bitで表現する規格だったが、文字が足りなくなり4byteになった Unicodeでは、文字の問題は解決しなかった 結果古い規格は現在も維持メンテナンスされている - 補助漢字 JIS X 208にない漢字を足したもの JIS X 208と一緒に使う事が前提 EUC-JPでは採用されているものの、Shift_JISでは使用されていない Shift_JISがISO/IEC 2022に準拠していないため使うことができなかった 最も普及しているShift_JISで作用されなかったためあまり普及していない JIS X 208 に足りない文字を足したもの JIS X 208 のスーパセットであるため、ISO/IEC 2022 に準拠してるかどうかは関係ない JIS X 0212 の失敗の反省から再度規格されたもの したがって JIS X 0212と文字がかなり被っている 符号化文字集合をどのようにコンピュータで表すかを定義したもの JISX 0208 EUC-JP ISO-2022-JP Shift_JIS Unicode UTF-16 UTF-32 UTF-8 - 森鴎外の 鴎など はしご亭 草なぎの彅  参考URL  https://tmtms.</description>
    </item>
    
    <item>
      <title>javaまとめ</title>
      <link>https://zarudama.github.io/posts/java-matome/</link>
      <pubDate>Sat, 08 Jun 2019 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/java-matome/</guid>
      <description>メッセージのUS化  日本語だとコンパイルエラーメッセージが化けるので  -Duser.language=en メモリー・リークの予防 http://www.ibm.com/developerworks/jp/java/library/j-leaks/ メモリー・リークは、いくつかの一般的な問題に注意することにより防ぐことができます。 しばしばメモリー・リークの原因となるのは、ハッシュ・テーブルやベクトルなどのコレクション・クラスです。 そのクラスが static と宣言されていて、アプリケーションの存続期間全体にわたって存在する場合、その可能性が特に大きくなります。 よくある別の問題は、あるクラスをイベント・リスナーとして登録しておきながら、そのクラスがもう使用されなくなった時点で登録削除するのを忘れている場合です。 また、クラスのメンバー変数が別のクラスを指す場合、適当なタイミングでその変数をヌルにセットする必要があります。
自作CRUDアプリ createメソッド実装時に下記の例外でハマる java.lang.reflect.InvocationTargetException commons-configurationではまる。 JavaDB javaDBのスタンドアロン版では、ijを起動中、サーブレットアプリからアクセスできないので注意。
connect &amp;#39;jdbc:derby:c:\Temp\dbname;create=true&amp;#39;; create table articles ( id integer primary key generated by default as identity, title varchar(256), body long varchar, updated_at timestamp ); insert into articles values (default, &amp;#39;title1&amp;#39;, &amp;#39;body1&amp;#39;, current_timestamp); tomcat context.xml
&amp;lt;Context reloadable=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;Resurce name=&amp;#34;jdbc/crud&amp;#34; auth=&amp;#34;container&amp;#34; type=&amp;#34;javax.sql.DataSource&amp;#34; driverClassName=&amp;#34;org.apache.derby.jdbc.EmbeddedDriver&amp;#34; url=&amp;#34;jdbc:derby:c:\Temp\dbname&amp;#34;/&amp;gt; &amp;lt;/Context&amp;gt; web.xml
&amp;lt;resource-ref&amp;gt; &amp;lt;res-ref-name&amp;gt;jdbc/crud&amp;lt;/res-ref-name&amp;gt; &amp;lt;res-type&amp;gt;javax.sql.DataSource&amp;lt;/res-type&amp;gt; &amp;lt;res-auth&amp;gt;Container&amp;lt;/res-auth&amp;gt; &amp;lt;/resource-ref&amp;gt; Servlet
private DataSource ds; @Override public void init() throws ServletException { try { ds = (DataSource) (new InitialContext()).</description>
    </item>
    
    <item>
      <title>第3のエディタEvilのすすめ</title>
      <link>https://zarudama.github.io/posts/evil_adventcalendar_2014/</link>
      <pubDate>Mon, 08 Dec 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/evil_adventcalendar_2014/</guid>
      <description>Evil Advent Calendar 2014 の8日目の記事になります。 Evil の使用人口が少なすぎるのでEvilを使う理由などを述べて人口が増えるのを目論みます。 Evilを薦めてるのかEmacsを薦めてるのかよくわからないまとまりのない記事になってしまいました。
EmacsとVim そこそこ経験のあるEmacserは大抵、viの操作もマスターしています。 Emacsがインストールされてない環境も多いのでそんなときはviを使ってささっと編集するのです。 hjklはもちろん、yy,dd,u,cw,yw,dw,もマスターしている人も多いのではないでしょうか？ 自分はそのたびに感じていました。
「ああ、viはなんて編集が楽なんだろ。指が全然痛くならねぇ。」
Emacsのカーソル移動「 C-p, C-n, C-f, C-b 」は、言葉の意味に関連付けているので覚えやすいです。 だから一見viに比べるととっつきやすんです。でも疲れるんですよ。指が圧倒的に！
これには理由があってホームポジションで状態を持たずに沢山の操作を実現するには 修飾キーや２段ストロークキーを使うしかないのです。 なので、ほぼほぼ全ての動作に小指コントーロールがつきまといます。
それに比べてviはどうでしょうか？ まずホームポジションから指を一切動かさずに右手だけでカーソル移動できます。 文字的には意味のないhjklですが、指の配置的には理にかなっています。 モードがあるおかげで修飾キーを使わずともいろいろと操作できます。 そして一番好きなのは
{count}{operater}{motion}  というシンプルだけど覚えやすいコマンド体系。 viを使うたびに私は思っていました。
「viはなんて操作しやすいのだろう」
と。
それでもEmacsを選ぶ理由 「そんなにviを賛美してEmacsをDisるんならとっととVimmerになれや」との声が聞こえてきそうですが、 Vimへ宗旨替えしようと思ってもできない自分がいるのです。
その最大の理由は「Lisp」。「ハッカーと画家」を読んだ方ならわかると思いますが「Lisp」は魅力的です。 プログラマならみんな憧れがあるのではないでしょうか？ LispプログラマにはEmacserが多いですし1、Lispの開発環境といえばEmacsのSLIMEが定番です。 なのでEmacsから離れたくないのです。
最近のVimは昔に比べてEmacsのような環境化が進んでいますし、 拡張がしやすいという理由でEmacsを選ぶ理由は薄いかもしれません。 ただしLispを勉強したいというなら別です。CommonLispにしろSchemeにしろCLojureにしろ、 やはりEmacsが一番サポートが厚い気がします。 なによりEmacs自身がLispで書かれているのでEmacsを選ぶイコール毎日Lispと戯れることになるのです。
以上のような理由でviのコマンド体系でLispで拡張できるエディタがあったらなぁと思っていたのでした。
2「ハッカーと画家」の作者は「vi」な人らしいです（Vimではないっぽいところが重要）。
Evilとは、Vimの操作性を備えたelisp実行環境である。 そんな時Evilに出会ったのです。EmacsなのにVim。「俺の求めていたのはこれだー」と思いました。 なんせEmacsLispで書かれたVimなので「Lispで拡張できる最高やん」と思ったのです。 EvilはEmacsでもあるのでもちろんEmacsの沢山の魅力的な拡張がそのまま動かせます。
 org-mode これがないと生きていけない dired 同じく！ anything,helm ライフチェンジング！これなしでは(ry auto-complate いまどきのIDEぽく eshell Editor上でShellを動かす快適さ、シェル上でS式評価できる便利さ！ gnus メールが読めちゃうよ！ skk Emacsとの相性バツグンIME!  navi2ch これで仕事中2chしててもばれない twittering-mode これで仕事中Twitterしてても(ry magit ベンリング！ slime CommonLisp 最高の開発環境！ cider Clojureといったらこれ！  こんなにあります(自分がよく使う拡張を挙げてみました)。 他にもはじめからEvil用に書かれたプラグインもあったりして 積極的にVimの機能がEvilに 移植 されています。</description>
    </item>
    
    <item>
      <title>Clojureでxmlを読みこむ方法</title>
      <link>https://zarudama.github.io/posts/clojure-xml/</link>
      <pubDate>Sun, 27 Jul 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/clojure-xml/</guid>
      <description>基本 clojureでxmlを処理する方法のメモ。随時更新予定。
下記のxmlをtest.xmlとしてプロジェクト直下に保存。
&amp;lt;parent&amp;gt; &amp;lt;child&amp;gt; hello &amp;lt;/child&amp;gt; &amp;lt;/parent&amp;gt; clojure.xml/parse関数を使うとmapデータに変換できる。
user&amp;gt; (require &amp;#39;[clojure.xml :as xml]) user&amp;gt; (xml/parse (slurp &amp;#34;test.xml&amp;#34;)) {:tag :parent, :attrs nil, :content [{:tag :child, :attrs nil, :content [&amp;#34;\n\t\thello\n\t&amp;#34;]}]} ここでは、slurp関数を使ってXMLファイルを直接読んで処理したが、 slurp以外の関数で読み込んだxmlを扱いたいときなどは、xmlは既に文字列になっていることが多い。 clojure.xml/parse関数は文字列を直接パースできないので下記のようなラッパー関数を用意する。
(defn xml-parse [s] (xml/parse (java.io.ByteArrayInputStream. (.getBytes s)))) これで文字列としてのxmlもパースできるようになった。
user&amp;gt; (def xml-doc &amp;#34;&amp;lt;parent&amp;gt; &amp;lt;child&amp;gt; hello &amp;lt;/child&amp;gt; &amp;lt;/parent&amp;gt;&amp;#34;) #&amp;#39;user/xml-doc user&amp;gt; (xml-parse xml-doc) {:tag :parent, :attrs nil, :content [{:tag :child, :attrs nil, :content [&amp;#34; hello &amp;#34;]}]} xmlのデータが画面に表示されると、場合によってはスクロールが重くなるので、 そんな時はC-c M-o でバッファクリアすると良い感じ。
xml-seq xmlをmapデータにしただけだと、各要素へのアクセスが大変なので =xml-seq= を使用して、各要素をトラバースした状態のシーケンスを用意することができる。 この関数を使用すると、それぞれのタグが先頭になった状態シーケンスが得られる。</description>
    </item>
    
    <item>
      <title>org-mode でファイルを開くとエラーが発生</title>
      <link>https://zarudama.github.io/posts/cask-org/</link>
      <pubDate>Mon, 07 Jul 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/cask-org/</guid>
      <description>org-modeをcask経由で新しくしたところ、挙動がおかしくなってしまった。 *.orgファイルを開くと、下記のようなエラーが *Message* バッファに表示され、 そのファイルが更新された状態になってしまう。
Invalid function: org-with-silent-modifications 似たような症状が下記にも報告されている。
 http://lists.gnu.org/archive/html/emacs-orgmode/2014-06/msg00622.html  上記スレッドでは、
 ...Emacs -q and reinstalling from elpa...  としたら解決したとあるが具体的なコマンド例がないのでよくわからなかった。
かわりにcask管理のorgを取得しなおした。こんな感じ。
$ rm -rf ~/.emacs.d/.cask/24.3.1/elpa/org-plus-contrib-20140707/ $ cd ~/.emacs.d/ $ cask その際、バージョンをひとつ前の2.8.6に変更
(source org) (depends-on &amp;#34;org-plus-contrib&amp;#34; &amp;#34;2.8.6&amp;#34;)  これでエラーにならなくなった。しかし、バージョンを確認すると最新の2.8.7bになっている。 なのでバージョン指定は不要かもしれない。
Caskの指定方法が間違っていたのだろうか？</description>
    </item>
    
    <item>
      <title>libGDX入門 その05 ゲームデータの保存</title>
      <link>https://zarudama.github.io/posts/libgdx-beginner5/</link>
      <pubDate>Sat, 05 Jul 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/libgdx-beginner5/</guid>
      <description>はじめに libGDX を勉強するついでに解説記事を書く シリーズ 5回目です。
前回 は、以下のことを学びました。
 Screenインタフェイスを使った画面遷移  今回は、前回作ったゲームに以下の機能を追加します。
 BGMのON/OFF機能 SEのON/OFF機能 HiScoreの表示  これらの情報は、ゲームを再開したときも保持していて欲しいですね。
そこで今回は、これら3つの情報を com.badlogic.gdx.Preferences というクラスを利用して 保存していきます。
公式情報は下記にあります。
 https://libgdx.com/wiki/preferences https://javadoc.io/doc/com.badlogicgames.gdx/gdx/latest/com/badlogic/gdx/Preferences.html  注意 今回「ゲームデータの保存」というタイトルにしてしまいましたが、 扱えるのはごく小さなデータのみです1。 また、データはテキストとして保存されるので、 ユーザーに改竄されて困るようなものは暗号化するなどの処置が必要です。
インスタンスの取得方法 さらに、ゲーム中の複雑なデータを扱う場合は、 データをシリアライズしたりして保存する必要があるかと思います。 これらについては、今回は扱いません。
下記で取得できます(公式からの引用)。
Preferences prefs = Gdx.app.getPreferences(&amp;#34;My Preferences&amp;#34;); 文字列の部分が名前になります。名前を変えればひとつのアプリで複数のインスタンスを扱えるようです。 個人的にこの名前は、javaのパッケージ名が良いかと思います。 (ただしそれがユニークであるという保証がある場合のみ)
というのものPreferenceというのは、対象の端末全アプリの中でユニークである方が安全だからです。 今回の例でいうと下記の名前になります。
Preferences prefs = Gdx.app.getPreferences(&amp;#34;com.zarudama.fishcatch&amp;#34;);  この辺の考察は下記が詳しいので、一読をおすすめします。 doc.tir.ne.jp/devel/clan/libgdx preferencesについて  値の書込みと読込み libGDXの Preferences は、Javaの標準クラスの java.util.prefs.Preferences や java.util.Map クラスに少し似ています。
公式から引用します。
prefs.putString(&amp;#34;name&amp;#34;, &amp;#34;Donald Duck&amp;#34;); String name = prefs.</description>
    </item>
    
    <item>
      <title>libGDX入門 その04 画面遷移</title>
      <link>https://zarudama.github.io/posts/libgdx-beginner4/</link>
      <pubDate>Sun, 29 Jun 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/libgdx-beginner4/</guid>
      <description>はじめに libGDX を勉強するついでに解説記事を書く シリーズ 4回目です。
前回 は、以下のことを学びました。
 ログ出力 スプライト表示のアニメーション テクスチャラップ バーチャルパッド  今回は、簡単なゲームを作ったので、その中の画面遷移を解説します。
ライフサイクルについて 今まであえて説明を避けてきたのですが(面倒そうなので←)、 Screenインタフェイスを扱うにあたり避けられそうもなかったので調査しました。
libGDXのライフサイクルと呼びだしメソッドの関係は以下のようになっています。
/img/libgdx-beginner/4/life-cycle.png
メソッドは、 ApplicationListener のものです。
注意して欲しいのは、PC版とAndroidで微妙に挙動が違うということです。 特にPC版は、待機状態のときもrenderメソッドが呼ばれ続けるので注意が必要です。 私はMacを持っていないのでわかりませんが、iOSも考慮したら更に違いがあるかもしれません。
   create() アプリケーションが新しく生成された時に呼ばれます。   resize() アプリケーションが新しく起動されたとき、PC版でウィンドウサイズが変化したとき、スマホ版で、端末の向きが変わったときなどに呼ばれます。   pause() スマホで電話が鳴った時やHome画面にした時、PC版でフォーカスが外れたときなどに呼ばれます。   resume() 待機状態から、ウィンドウがアクティブになった時に呼ばれます。   dispose() アプリケーションが破棄される時に呼ばれます。     ライフサイクルに関する情報は下記が非常に詳しいです。一読をお勧めします。 clan libGDXメモ 上記サイトの説明にもありますが、ゲームの情報を保存するときは、 pause() が良いようです。   公式ドキュメントは下記にあります。 https://libgdx.com/wiki/app/the-life-cycle  画面遷移 今回作成したゲームでは、次のような遷移があります。
/img/libgdx-beginner/4/screen.png
まず「メインメニュー」が表示され、 「START」をタップすると「ゲーム」画面になり、 「QUIT」をタップすると「メインメニュー」画面に戻ります。 非常にシンプルですね。
その1でも紹介しましたが、関連するクラス図を再掲します。
/img/libgdx-beginner/4/class.png</description>
    </item>
    
    <item>
      <title>cygwinにtmuxを導入</title>
      <link>https://zarudama.github.io/posts/cygwin-tmux/</link>
      <pubDate>Sat, 21 Jun 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/cygwin-tmux/</guid>
      <description>はじめに Cygwinでは、長らくtmuxが使えなかったのですが、 最近tmuxが正式にCygwinをサポートしたようです。
コンパイルしてインストールするため、依存するライブラリが必要です。
2014/06/23 追記
apt-cyg は、最新版を利用すれば問題ありません。
apt-cygを事前にイストールしておけば簡単ですが、+ +最新のCygwinでは、apt-cygがすんなり動きません。
インストール方法 apt-cygで事前に必要なパッケージをインストールしておく。
$ apt-cyg install ncurses $ apt-cyg install libncurses-devel $ apt-cyg install libevent-devel $ apt-cyg install pkg-config autoconf automake $ apt-cyg install make gcc-core あとは参考サイトにあるとおりでオッケー。
$ git clone http://git.code.sf.net/p/tmux/tmux-code tmux-tmux-code $ cd tmux-tmux-code/ $ ./autogen.sh $ CFLAGS=&amp;#34;-I/usr/include/ncurses&amp;#34; ./configure --prefix=/usr $ make &amp;amp;&amp;amp; make install 参考
 http://atdxfe.hatenablog.com/entry/2013/11/27/031058 http://java.ociweb.com/mark/programming/tmuxInCygwin.html  翌日、なぜか起動しなくなった。 後日、起動時に下記のエラーが発生
$ tmux failed to connect to server: No error .</description>
    </item>
    
    <item>
      <title>apt-cygがうまくいかなくなった。</title>
      <link>https://zarudama.github.io/posts/apt-cyg-bug/</link>
      <pubDate>Fri, 20 Jun 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/apt-cyg-bug/</guid>
      <description>はじめに Cygwinには、非公式で、apt-cygというパッケージ管理システムがあります。 これは、ubuntuでいう apt-get のようなものです。標準のsetup.exeはGUIベースで 操作が面倒なので、apt-cygを導入すると非常に捗ります。
2014/06/23 追記 ここから
最新のapt-cygでは、下記の問題は全て解決されています。 古いapt-cygを利用してる方は、最新のapt-cygをチェックしてください。 (間違った内容の記事を載せてしまいました。申し訳ありません)
2014/06/23 追記 ここまで
そんなapt-cygですが、最近は更新が滞ってるらしく、最新のCygwinではうまく動きません。
 2013/08にリポジトリパスの変更があった それに伴い、apt-cygが動かなくなった。 さらに2013/10時点で、リポジトリ内のアーカイブ内のフォーマットの変更もあった模様 tar.bz2から、tar.xzなどに変更になった模様。詳細は不明。 インストールできるパッケージとできないパッケージが発生。 上記変更点をサポートするapt-cygは以下(本家はメンテされていない。。。) https://github.com/zship/apt-cyg  といった感じです。
対応方法 2014/06/23 追記
対応方法は、本家最新版を利用すれば問題ありませんので、削除しました。</description>
    </item>
    
    <item>
      <title>libGDX入門 その03 ログ出力とアニメーションとバーチャルパッド</title>
      <link>https://zarudama.github.io/posts/libgdx-beginner3/</link>
      <pubDate>Thu, 19 Jun 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/libgdx-beginner3/</guid>
      <description>はじめに libGDX を勉強するついでに解説記事を書く シリーズ 3回目です。
前回 は、以下のことを学びました。
 カメラとビューポート タッチ処理  今回は次のことを学びます。
 ログ出力 スプライト表示のアニメーション テクスチャラップ バーチャルパッド  前回までは、最初の雛形コードに徐々にコードを継ぎたして完成させるというチュートリアル形式でしたが、 実際にコードを入力しながら実行していくのは少ないんじゃないかという疑問と(自分も含めて)、 記事を書くのが大変なので(手抜き)、最初に一気に解説し、最後にコードを載せるスタイルにします。
ログの出しかた プログラムの動作を追うとき、ログ出力はとても重宝しますよね。 デバッガもいいですが、私は昔ながらのデバッグプリントで追うのが好きです。
ということで、ログ出力の方法を解説します。
公式から引用します。
Gdx.app.log(&amp;#34;MyTag&amp;#34;, &amp;#34;my informative message&amp;#34;); Gdx.app.error(&amp;#34;MyTag&amp;#34;, &amp;#34;my error message&amp;#34;, exception); Gdx.app.debug(&amp;#34;MyTag&amp;#34;, &amp;#34;my error message&amp;#34;); log メソッドは普通に情報を出力したい場合、 =error= メソッドは、例外を共なうようなエラー出力(第3引数にはException型)をしたい場合、 =debug= メソッドは開発時のみ出力したい場合に使用します。
第一引数の MyTag は識別子ですね。一般的にはにはクラス名などが多いようです。 自分は下記のようにクラスフィールドを定義しておき、この LOG_TAG を使用します。
public static final String LOG_TAG = GameScreen.class.getSimpleName(); こんな感じです。
Gdx.app.log(LOG_TAG, &amp;#34;my informative message&amp;#34;); 次のように表示されます。
GameScreen: my informative message こうするとログ出力にクラス名も一緒に表示されるので、 どこで出力したメッセージか一目でわかるので便利です。</description>
    </item>
    
    <item>
      <title>libGDX入門 その02 カメラとビューポート</title>
      <link>https://zarudama.github.io/posts/libgdx-beginner2/</link>
      <pubDate>Mon, 02 Jun 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/libgdx-beginner2/</guid>
      <description>はじめに libGDX を勉強するついでに解説記事を書く シリーズ 2回目です。
前回 は、プロジェクトを作って、以下のことを学びました。
 画像の表示 キーボードによる操作 BGMの再生 効果音の再生  今回は次のことを学びます。
 物理画面に依存しない画面表示 タッチ処理  物理画面に依存しない画面表示  物理画面とは何でしょうか？ここでは次のように定義します。 スマホやタブレット画面解像度 デスクトップのウィンドウサイズ Androidには様々な画面サイズがありますし、 iPhoneもモデルチェンジ毎に画面サイズが変化しています。 これら様々な画面サイズのことを考慮しないと、 意図した通りの画面が表示できません。  ゲームを作るときの基本として、物理画面でプログラムしないというのがあります。 物理的なディスプレイのサイズに依存した座標管理をすると、 移植性が下がり仕様変更に弱くなったり、 端末毎の画面サイズの違いを吸収できないプログラムになってしまいます。
例えば横スクロールアクションを作ったときに、 Aさんの画面は小さいから敵の動きがところ狭しとなるところが、 Bさんの端末だと画面が大きいからフィールドが遠くまで見わたせて楽々プレイできる、 なんてことが発生します。端末によって難易度が変わってくるのです。
https://zarudama.github.io/img/libgdx-beginner/2/screen2.png
実は既にこの問題は、私の手元で発生しています。 下記は、Nexus7(2013)で表示したサンプルの画面です。
http://zarudama.github.io/img/libgdx-beginner/2/004.png
/img/libgdx-beginner/2/003.png
Nexus7版は、PCの画面と全然違いますね。キャラクターや文字が非常に小さくなってます。 これはPC版が640x480の解像度なのに対して、Nexus7版は1920x1200の解像度で表示しているからです。 この状態でゲームを作ってしまったら全然別ものになってしまいますよね。 ちなみにMac持ってないのでiOS系ではどうなるかわかりません。
というわけで、どの端末でも公平に画面表示できるようにひと工夫必要になってきます (こういう処理は、ゲームづくりの序盤でやっておかないと、あとから変更するのは大変なので さっさと済ませておきたいことのひとつですね)。
カメラとビューポート ではどうやってこの問題を解決するか。それにはカメラとビューポートを使用します。
カメラとは、ゲームの世界を現実世界のディスプレイに届けるためのオブジェクトです。
ビューポートとは、カメラの捉えたゲームの世界を、ディスプレイのどこに表示するかを 決める枠(矩形領域)のことです。
https://zarudama.github.io/img/libgdx-beginner/2/screen3.png
ビューポートは、ディスプレイサイズと一致しているわけではないことに注意してください。 ゲームのサンプルなどだと一致していることが多いですが、 今回のように様々なディスプレイサイズに対応させる場合は、 一致しなくなることの方が多くなるはずです。また、他の使い方としては、 カメラを2つ用意して一方はゲーム画面、 一方は小さな枠で別のシーンを表示するなんてこともできるかもしれません(やったことないですが)。
 カメラを使うことにより、カメラとして定義した論理空間でゲームを制御できます。 この空間でやりとりすれば、あとはlibGDXがよろしく画面に表示してくれるわけです。 カメラでできることを列挙してみます。 物理的な画面サイズを気にせず、自分の定義した画面サイズでゲームを構築できる ズームイン、ズームアウト、画面を回転させたり、揺らしたりなど、画面全体にかかるエフェクトが簡単にできる カメラを動かすことで、スクロール処理が簡単に実装できる カメラを導入することでこのような自由が手に入るわけですが、 その代償として操作が複雑になってしまうのも事実です。 コーディング中は、今自分がどこの座標系で何を操作しているかを常に意識する必要があります。 ちょっと大袈裟ですが、慣れれば大したことありません。またこの考えはそのまま3Dプログラミングにも繋がります。   座標系には、以下の種類があります。 ワールド座標系。ゲームオブジェクトを置く論理空間。画面サイズは気にしなくて良い。 カメラ座標系。ワールドのゲームオブジェクトをカメラの枠での座標系で測りなおした座標系。真ん中が原点となる。 ビューポート座標系。左下を原点とした座標系。 スクリーン座標系。Android左上を原点とした最終的な座標系。タッチ座標などはOSからこの座標系の値が得られる。  ビューポート座標系とスクリーン座標系は他では別の呼びかたかもしれません。 座標系を意識する例を示します。</description>
    </item>
    
    <item>
      <title>Caskの導入と設定ファイルの棚卸し</title>
      <link>https://zarudama.github.io/posts/cask/</link>
      <pubDate>Sun, 01 Jun 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/cask/</guid>
      <description>はじめに 最近Caskが流行り始めてますね。標準のパッケージシステムであるpackage.elがあるのにどうよ？ って最初は否定的だったのですが、その機能が自分が求めてたものだったので導入しました。 ClojureのLeiningenみたいに設定ファイルを記述してコマンド叩けば自動でライブラリを落としてくれます。 良いです。
そしてCask導入ついでに、設定ファイルたちの見直しを実施しました。 これって部屋の掃除と同じで、なかなか気がすすまない作業ですよね。 毎日すこしずつ掃除してればちょっとの手間ですむけど溜め込むと大変。 自分は後者でした。ここでは、Caskの導入方法と、自分の設定ファイルの解説をしたいと思います。
Caskの導入 インストールは非常に簡単です。
 https://github.com/cask/cask  公式にあるとおり下記コマンドを実施するだけです。
$ curl -fsSkL https://raw.github.com/cask/cask/master/go | python すると、 ~/.cask にcask自身がインストールされます。 あとは、PATHに下記を追加しておきます。
export PATH=$PATH:~/.cask/bin これで準備オッケーです。
Caskファイルを編集して自分の欲しいパッケージを羅列してきます。
$ vim ~/.emacs.d/Cask で、最後に下記コマンドを実行すれば、あとはツラツラと必要なパッケージが =~/.emacs.d/.cask= というディレクトリに保存されていきます。
$ cd ~/.emacs.d $ cask 簡単ですなー。
そしてこれらを利用するにはロードパスを通しておきます。
(require &amp;#39;cask &amp;#34;~/.cask/cask.el&amp;#34;) (cask-initialize) あとはいつもどおりの自分の設定を書けばオッケー。
ちなみにWindowsでは導入できないとの情報を見ましたが 自分の環境では問題ありませんでした。環境は下記のとおりです。
# PC Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz 2.50GHz RAM 4.00 GB # Windows Windows7 Professional Service Pack 1 32bit # emacs GNU Emacs 24.</description>
    </item>
    
    <item>
      <title>Emacs JDEE でlibGDXプログラミング!</title>
      <link>https://zarudama.github.io/posts/libgdx-jdee/</link>
      <pubDate>Thu, 15 May 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/libgdx-jdee/</guid>
      <description>はじめに libGDX でゲームプログラミングを始めています。
最初は、Eclipseでコーディングしていました。
でも重すぎるので、軽いと評判のIntelliJ IDEAに乘りかえました。
確かに快適でした。Eclipseよりは。しかしそれでもいろいろ不満がつのる。。。
…結局、Emacsに戻ってきました。やはり最後はいつもの場所へ。悲しい性ですね。
ということで、EmacsでJavaやるなら JDEE です。
gradleプロジェクトをJDEEでも使えるようにする JDEEはgradleをサポートしてません。 でもやっぱりいるんですねー。すばらしき先人が。 GradleプロジェクトをJDEEの plj.el に変換するスクリプトを発見しました。
 http://ignatyev-dev.blogspot.jp/2013/07/gradle-projects-in-jdee.html  上記で紹介されている jdee.gradle を、libGDXのプロジェクトルートに配置します。 そのままだと、testディレクトリがないと怒られるので、testを含む行をコメントアウトします。
更に build.gradle を編集し、 apply from:... を追加します。
} } +apply from:&amp;#39;jdee.gradle&amp;#39; allprojects { apply plugin: &amp;#34;eclipse&amp;#34; apply plugin: &amp;#34;idea&amp;#34; あとは、プロジェクトルートで下記コマンドを実行します。
$ ./gradlew jdee すると各サブプロジェクト内で、 prj.el が作成されます。
最後に下記の plj.el をプロジェクトルートに配置します。
(jde-project-file-version &amp;#34;1.0&amp;#34;) (jde-set-variables &amp;#39;(jde-jdk (quote (&amp;#34;1.7&amp;#34;))) &amp;#39;(jde-jdk-registry (quote ( ;;(&amp;#34;1.7&amp;#34; . &amp;#34;c:/Program Files/Java/jdk1.7.0_09/&amp;#34;) (&amp;#34;1.7&amp;#34; . &amp;#34;/usr/lib/jvm/jdk1.7.0/&amp;#34;) ))) &amp;#39;(jde-jdk-doc-url &amp;#34;http://docs.</description>
    </item>
    
    <item>
      <title>uim-skkでsticky-shiftを実現する</title>
      <link>https://zarudama.github.io/posts/uim-skk/</link>
      <pubDate>Sun, 11 May 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/uim-skk/</guid>
      <description>Ubuntuを13.04から14.04にアップグレードしました。 Ubuntu界隈では、IMEがIBus1.5になり使いにくいと大荒れのようです。 IBus1.5では、IMEを切り替えるとキーボードの配置まで変わるらしく、 特に英語キーボードを使ってたりするとストレスが半端ないようです。
私は、幸いにもuim-skkを使用していたので、この騒ぎを体験せずにすみました。 やっぱりskkはおすすめですね。
そんな我が道をいくuim-skkですが、ひとつ問題がありました。 それは、sticky-shiftの設定ができないとうことです。
私は、EmacsとWindowsのSKKFEPでは、セミコロンをSticky-Shiftとして設定しています。 しかし、uim-skkには、設定ダイアログにそのような項目が見当たりません。 公式ドキュメントには、対応したとはあるのですが、 具体的な設定方法が見当りません。
 https://code.google.com/p/uim-doc-ja/wiki/RequestUimSolved#sticky_shift%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84  2chに質問したりもしたのですが、特に反応もなく放置されたままでした。
 http://anago.2ch.net/test/read.cgi/software/1328329402/197  それでもやはりなんとかしたいと思い、 改めてドキュメントを読んでみると、 ~/.uim という設定ファイルの詳しい記述方法がありました。 最初からもっと読んでおくべきでしたね。。。
 https://code.google.com/p/uim-doc-ja/wiki/CustomizeUim  そこで、そこの説明に載っているソース( /usr/share/uim/ )をgrepしてみると、 それらしきカスタム変数が定義されていたのです。 さっそく見よう見まねで ~/.uim を定義してみました。
(require-module &amp;#34;skk&amp;#34;) (define-key skk-sticky-key? &amp;#39;(&amp;#34;;&amp;#34;)) これでバッチリセミコロンでSticky-Shiftできました! uim-skkを使用している人はぜひ試してみてください。 快適さが全然ちがいますよ。
以下わかったことをまとめておきます。
 基本は、GUIの設定ダイアログで設定する。 それで設定できないものは、 ~/.uim にSchemeで設定ファイルを記述する。 ダイアログとかぶる設定は、 ~/.uim が優先される。 端末を開き、uim-shを打ち込めば、uimのschemeのREPLが起動する。 (exit)で終了。  http://mikio.github.io/img/uim/uim.png
Schemeで設定できる UIM ってやっぱカッコいいな。</description>
    </item>
    
    <item>
      <title>libGDX入門 その01 画像を表示したり音を鳴らしたり</title>
      <link>https://zarudama.github.io/posts/libgdx-beginner1/</link>
      <pubDate>Sun, 04 May 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/libgdx-beginner1/</guid>
      <description>はじめに libGDX は、Javaでゲームを作るためのライブラリです。 マルチプラットフォーム対応で、PC(Windows,Linux,Mac), Android, iOS, HTMLに対応しています。
libGDXは、日本での知名度はイマイチのようですが、海外ではかなり人気があるようです。 実際、ググってみると、英語のドキュメントは沢山みかけますが、日本語のドキュメントはまだまだ少数です。
 また、公式ドキュメントも大変充実しています(英語のみ)。 https://libgdx.com/wiki/ 実のところこのドキュメントを読めば大抵の事は解決します。  ただ、私もそうなんですが、日本語情報がないってだけで、 重い腰が上がらないって人も多いと思います。 そんな人向けに(というより自分の勉強ついでに)、 そして少しでもlibGDXを使用する人が増えることを願い、 少しずつ記事を書いていこうと思います。
この記事が、libGDXを学ぶためのきっかけになって頂ければ幸いです。
その2は こちら。
このシリーズの目次は こちら 。
プロジェクトを作る  libGDXでは、専用のプロジェクト生成アプリが用意されています。 マルチプラットフォームの性質上、プロジェクトの構成が複雑なので 素直にこのアプリを使用したほうが良いかと思います。 http://libgdx.badlogicgames.com/download.html  起動は、以下のような感じです。Windowsならばダブルクリックで起動できるでしょう。
$ java -jar gdx-setup.jar Usage: GdxSetup --dir &amp;lt;dir-name&amp;gt; --name &amp;lt;app-name&amp;gt; --package &amp;lt;package&amp;gt; --mainClass &amp;lt;mainClass&amp;gt; --sdkLocation &amp;lt;SDKLocation&amp;gt; dir ... the directory to write the project files to name ... the name of the application package ... the Java package name of the application mainClass .</description>
    </item>
    
    <item>
      <title>Windows7でemacsのアイコンが2重に表示されるのを防ぐ</title>
      <link>https://zarudama.github.io/posts/emacs-win-taskbar/</link>
      <pubDate>Wed, 16 Apr 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/emacs-win-taskbar/</guid>
      <description>Windows7には、タスクバーにアイコンを登録しておくと、 Win+数字キーで起動できる便利な機能があります。
でもこれ、Windows版emacsだとうまくいきません。
runemacs.exe を起動してタスクバーに登録しても、 起動時にDos窓が開いてアイコンが2つ表示されてしまいます。 これでは不便なのでなんとかします。
この問題については、下記で解説されてるので一読をおすすめします。
 http://dnerkx.blogspot.jp/2009/12/emacs-ntemacs-231-windows-7-part2.html  ただしこのサイトで公開されているツールはもうないようなので、 下記から代替ツールをダウンロードして適当なところに配置します。
 https://code.google.com/p/win7appid/  runemacs.exe のショートカットを作成して、 先程ダウンロードしたWin7AppId1.1.exeと同じ場所に配置します。
さきほどダウンロードしたWin7AppId1.exeを、 登録したタスクバーアイコンを指定してコマンドプロンプトから実行します。
DOS&amp;gt; Win7AppId1.1.exe runemacs.lnk GNU.Emacs runemacs.lnkが更新されるので、右クリックして「タスクバーに表示する」を 選択すれば準備オッケーです。
これで、タスクバーのアイコンをランチャーとして登録し、 かつ余計なDos窓が開くこともなくなります。</description>
    </item>
    
    <item>
      <title>vimのclojure実装であるaviを試してみた。</title>
      <link>https://zarudama.github.io/posts/avi/</link>
      <pubDate>Fri, 04 Apr 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/avi/</guid>
      <description>vimをclojureで実装したらしい avi を試してみることにした。 確認環境は、ubuntu13.04。
$ git clone https://github.com/maitria/avi.git $ cd avi READMEによると、avi本体を /usr/local 配下にインストールするとのこと。 あとでアンインストールができなくなると困るので paco を使うことにした。
$ sudo paco -D LEIN_ROOT=yes /home/mikio/bin/lein install LEIN_ROOT は lein をrootユーザーで使用するときは定義しなくてはならないらしい。 (値のyesは適当)。pacoのDオプションはインストールの対象をカレントディレクトリにするという意味。
インストールが始まるとワラワラと沢山のライブラリをダウンロードしてくる。 ダウンロードとインストールが終ったらコマンドが返るのでおもむろに
$ avi で見慣れたvimの画面が表示された。
 起動したところ   JVMで動くから重いと思ってたら起動が早くてびっくりした(本家よりはわずかに重い)。 どうやらJNIを使って下回りの部分はC言語で書かれているようである。 (なのでwindowsでは動かないかも)。
肝心の操作は、iコマンドはもちろんaコマンドも受け付けず、文字入力はなにもできない状態だった。 唯一、 :q はできたので、終了させることはできた。。。 (個々の環境にも依存すると思うので無事操作できた人がいたらコメントやリプで教えていただけると嬉しいです)
ちょっと残念な結果になったが、今後の開発が非常に楽しみなプロダクトだ。</description>
    </item>
    
    <item>
      <title>GCの発生頻度などの調査</title>
      <link>https://zarudama.github.io/posts/jvm_gcutil/</link>
      <pubDate>Tue, 25 Mar 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/jvm_gcutil/</guid>
      <description>GCの発生頻度を調査するためのカンペ。gclogを使用せずにお手軽に実施できる。
まずはプロセスIDを調べる。例としてtomcatの場合。
$ sudo -u tomcat jps -v tomcatユーザの起動したJavaプロセスのIDを付加情報付きで表示する。
javaプロセスがひとつしかない場合などは、下記のほうが楽かもしれない。
$ pgrep -lf java PIDが123456だった場合、3秒ごとにgcの発生状況をチェックするコマンドの例。
jstat -gcutil -t 123456 3000 意味は以下のとおり。
jstat &amp;lt;出力オプション&amp;gt; &amp;lt;プロセスID&amp;gt; &amp;lt;データ取得間隔(ms)&amp;gt; -t タイムスタンプを出力 -gcutil GCの統計情報  jstatのマニュアルは以下。
 http://docs.oracle.com/javase/jp/6/technotes/tools/share/jstat.html  gcutilの見出し
Timestamp S0C S1C S0U S1U EC EU OC OU PC PU YGC YGCT FGC FGCT  gcutilの見出しは以下のルールになる
   S* Suviver    E* Eden    Y Young    O* Old    P* Permenet Permanent領域は、JVMにロードされたクラスの置き場所   F* Full    *C comitted javaが確保したメモリサイズ   *U used 使用済みメモリ   *GC  GCの回数   *GCT  GCの時間    GCについては、下記が詳しい。</description>
    </item>
    
    <item>
      <title>JVMのヒープサイズと変更方法</title>
      <link>https://zarudama.github.io/posts/jvm_mem/</link>
      <pubDate>Tue, 25 Mar 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/jvm_mem/</guid>
      <description>稼動中のJVMのヒープサイズを知りたくなることは良くあるのでその方法。1
JVMの初期ヒープサイズ JVMは、サーバーモードで起動しているのか、クライアントモードで起動しているかで、 初期割り当てのヒープサイズが異なる。
サーバーモードなのかクライアントモードなのかは、実行ユーザにて、下記コマンドで確認できる。
$ java -version java version &amp;#34;*****&amp;#34; Java(TM) SE Runtime Environment (build ******) Java HotSpot(TM) Server VM (build ******) Severモードの場合は、 Server の表記があるはず。
 サーバーモード | 初期ヒープサイズ | マシンの物理メモリーの 1/64 か、妥当な最小サイズかの大きい方。 | | 最大ヒープサイズ | 物理メモリーの 1/4 か、1GB かの小さい方。 | http://docs.oracle.com/javase/jp/6/technotes/guides/vm/gc-ergonomics.html  JVMの稼動時のヒープサイズ JVMの使用しているヒープの量を調べる(以降、すべてOracleJava)。
$ sudo jstat -gc 28905 S0C S1C S0U S1U EC EU OC OU PC PU YGC YGCT FGC FGCT GCT 127552.0 137152.0 0.0 68410.</description>
    </item>
    
    <item>
      <title>ちょい足しawkの基本</title>
      <link>https://zarudama.github.io/posts/awk/</link>
      <pubDate>Tue, 25 Mar 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/awk/</guid>
      <description>基本 コンマンドラインでちょい足し的に使うときのカンペ。
$ awk &amp;#39;[BEGIN {各行を処理する前の処理}] [パターン] {各行の処理} [END {各行を処理した後の処理}]&amp;#39;  BEGIEN, END, パターンは省略できる(&#34;[]&#34;でくくったもの) 例は以下。アクセスログのステータスコードが200のものを出力  awk &#39;$4 == &amp;quot;200&amp;quot; {print $4,$5}&#39;# $4が200のとき、$4,$5を表示 awk &#39;$4 != &amp;quot;200&amp;quot; { print }&#39; # $4が200でないとき、1行まるごと表示 awk &#39;$4 ~ /200/ { print }&#39; # $4が200のとき、1行まるごと表示(正規表現) awk &#39;$1 ~ /^a/ { print}&#39; # $1が&amp;quot;a&amp;quot;で始まるとき、表示(正規表現) awk &#39;$1 !~ /^a/{ print}&#39; # $1が&amp;quot;a&amp;quot;以外で始まるとき、表示(正規表現)  (例)
$ cat access.log | awk &amp;#39;$4 = &amp;#34;200&amp;#34; {print $5$6}&amp;#39; | sed &amp;#39;s/\&amp;#34;//g&amp;#39; デリミタを変更するには Fオプションを使用する。カンマの場合は以下のとおり。</description>
    </item>
    
    <item>
      <title>tokyo.clj#19に参加してきた。</title>
      <link>https://zarudama.github.io/posts/tokyoclj19/</link>
      <pubDate>Sun, 16 Mar 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/tokyoclj19/</guid>
      <description>鉄は熱いうちに打てということで、帰宅直後のいまのうちに書いておきます。
3年ぶりにtokyo.cljに参加してきました。 その前の日にはsaitama.cljにも参加してきました。 この2日間で得られた知見をメモしておきます。
 引数は、なんでもmapにするのがおすすめらしい。 変数がないからといってletを使ってはいけないことはない。 むしろ自己説明的なコードとしてどんどん使うべき。 Luminus は結構よさげ(とある洋書 で推されてるとのこと) noirとLightTableとkormaとVisualStudioは全部おなじ作者 ベテランのすごいエンジニアからも注目されているClojure(どんな人かはここでは言えませんが) 会社経営者からも注目されているClojure(技術に強い会社をつくりたいとのこと) asyncを使った Dots というスマホゲームのClojureScriptの移植版があるらしい。 ゲームをつくるときの状態管理のひとつの実装例として、ゲーム内のすべての状態をひとつのatomで定義しておく。 4clojure は良い でも全部解く必要はない Clojureをつかって機能拡張したいからエディタ作ってますというemacserが二人もいたこと! 自分もClojureでemacs的なエディタをぼんやりと作りたいなーと思ってた。 WebViewを使ったエディタが最近のトレンド？(Atom, LightTable, ねこはる氏の自作エディタなどなど) 以外とClojureでゲームをつくりたいという需要があること やっぱりみんな英語が得意、少なくとも情報を得るために海外サイトは見ている。 Clojureをおしゃれな言語にして女子受けをよくして、ゆくゆくは アイドル を生みだそう! 5月下旬にはClojureの入門本がでる 次回のtokyo.cljはサイン会!(重要)  勘ちがいとかあるかもしれまんせんがこんな感じ。 ライトニングトークの内容はあとで追いかけおようと思います。
やはり勉強会は懇親会が重要なんだなと思った次第です。 なにより普段ひとりでClojureコード書くので実際にリアルでClojureの話をできたのはよかったですね。
自分は長らく初級者だと思ってたんですが、 今日いざコードを書いてみようとおもったら普通に括弧mapとか括弧ifとか打ってて、 「あれ、これはもう初級者じゃなくね？」と思ったのでした。あ、でもこれは、EmacsLispの影響かもしれません。 というか、Clojureのスキルはほとんどないです。 それでもこのブログは、Clojure製のブログジェネレータ で書いてます。 なにが言いたいかというと、みんなClojureやりましょうです。LightTable とかおすすめです。
最後に、勉強会を開催主導してくれたスタッフの皆様、お疲れさまでした。</description>
    </item>
    
    <item>
      <title>特定の日付より古いファイルを削除する方法</title>
      <link>https://zarudama.github.io/posts/find-date-del/</link>
      <pubDate>Sat, 15 Mar 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/find-date-del/</guid>
      <description>例えば一年以上前の3/3より前(3/2以前)のログファイルを削除したい場合。
/img/find-del/find1.png
findがすぐに思いつくが、findには日付指定のオプションが見あたらない。
答え touchでダミーファイルを作って、findのnewerオプションと否定演算子を使い、xargsとrmで削除する。
$ touch -t 201303030000 /tmp/hoge $ find /usr/local/apache/logs \! -newer /tmp/hoge|sort|less 中身を確認して問題なさそうなら
$ find /usr/local/apache/logs \! -newer /tmp/hoge|xargs rm 解説 普通に考えると find を使って -mtime などで日数を指定する。
$ find /usr/local/apache/logs -mtime +180|wc -l 554 $ find /usr/local/apache/logs -mtime +90|wc -l 757 でも今回の要件の場合日数を計算するのが面倒なので日付を直接指定して削除したい。 しかし man find してもそんなオプションはない。 だが良くみるとファイルのタイムスタンプを基準にするオプション newer ならある。 このオプションを使えばなんとかなりそうである。
まず下記のようにダミーのファイルを作成する。
$ touch -t 201303030000 /tmp/hoge tオプションの意味は YYYYMMDDhhmm 。詳細は man touch 参照。
で、このファイルのタイムスタンプを基準に newer を使えばよい。
$ find /usr/local/apache/logs -newer hoge|sort|less これで2013年3月3日以降に変更されたファイルを抽出できる。 だが今回の場合は「指定日以前」のファイルを抽出したいのでこれでは駄目だ。</description>
    </item>
    
    <item>
      <title>キーボードについて</title>
      <link>https://zarudama.github.io/posts/thinkpad-keyboard/</link>
      <pubDate>Thu, 23 Jan 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/thinkpad-keyboard/</guid>
      <description>自分はまだThinkpadを持っていないんですが、将来的にThinkPad(X1Carbon)を使いたいと思っていました。 そこでここ数ヶ月は、会社のデスクトップで Thinkpadのトラックポイントキーボード を使用していました。
しかし先日ThinkpadX1Carbonが5列配列になった と知り、大変衝撃を受けました。 ファンクションキーは、オフィス系アプリで頻繁に使いますし、 ブラウザや開発ツールなどでもよく使用する利用頻度の高いキーです。 これを外すなんてありえません。1
さらに下記の不満が日頃から溜まっていました。
 HOME、ENDと矢印キーが離れすぎていて使いずらい(このストレスが一番大きい)。 F5とF4,F12の後ろなどに隙間がないため、ファンクションキーが押しにくい。 ドリフト現象(指が触れていないのに勝手にカーソルが動いていしまう)が頻繁おきる。 トラックポイントを使ったスクロールがうまくいかないアプリがたまにある。 トラックポイントによるスクロールを一番良く使うChromeでスクロールができなくなった(Chrome更新による不具合)。 結構ドライバ依存なところがあり、ubuntuできちんと動いてくれるか不安 - などです。  トラックポイント自体は非常に使いやすいのですが、 上に挙げた不満を帳消しにするほどの利点ではないということで、 結局いつものキーボードに戻りました。
今回の件でわかったことは、自分は、HOME,ENDと矢印キーの配置が 非常に重要で、この配置以外は受けいれられないんだなということでした。
/img/keyboard.jpg
たぶんこの配置を満たしているノートPCはなくて、 そういう意味ではどんなノートでもいいのかもしれません。
次期ノートからは、Thinkpadは選択肢から外し、 VAIO Proあたりを検討しようと思います。
 昔、HappyHakkingキーボードを使ってましたが、ファンクションキーがないのが馴染めませんでした。 [return]   </description>
    </item>
    
    <item>
      <title>Misakiにnrepl-serverを埋め込む</title>
      <link>https://zarudama.github.io/posts/misaki2/</link>
      <pubDate>Sat, 11 Jan 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/misaki2/</guid>
      <description>misakiのプラグインを開発していて、nreplから接続したかったのでその方法。 下記のように修正。
mikio@gnudam:~/dev/misaki$ git diff HEAD^ diff --git a/.gitignore b/.gitignore index fb7a616..777bdaa 100644 --- a/.gitignore +++ b/.gitignore @@ -7,6 +7,8 @@ /.lein-failures /checkouts /.lein-deps-sum +misaki/src/misaki/ +/.nrepl-port /blog /test/public /samples/*/public/201* diff --git a/project.clj b/project.clj index 82e93ff..8b0aa33 100644 --- a/project.clj +++ b/project.clj @@ -13,7 +13,9 @@ [cuma &amp;#34;0.0.4&amp;#34;] [clj-gntp &amp;#34;0.0.1&amp;#34;] ; cljs compiler - [org.clojure/clojurescript &amp;#34;0.0-1586&amp;#34;]] + [org.clojure/clojurescript &amp;#34;0.0-1586&amp;#34;] + [org.clojure/tools.nrepl &amp;#34;0.2.3&amp;#34;] + ] :plugins [[codox &amp;#34;0.6.4&amp;#34;] [lein-cloverage &amp;#34;1.0.2&amp;#34;] diff --git a/samples/blog/_config.clj b/samples/blog/_config.</description>
    </item>
    
    <item>
      <title>Emacsのorg-modeでBlogを書ける「Misaki org-mode」を書いた</title>
      <link>https://zarudama.github.io/posts/misaki/</link>
      <pubDate>Sun, 05 Jan 2014 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/misaki/</guid>
      <description>年末から地味につくっていた Misaki のプラグインですが、 ひととおり欲しい機能の実装を終えたので、github公開しました。 Emacs org-mode で記事を書けるBlogジェネレータです。
 https://github.com/mikio/misaki-orgmode デモ  org-modeのBlogジェネレータは以外と少ないので選択肢が増えたと思います (Misaki-orgmodeは、Blogに特化しているわけではないので、 静的サイトジェネレータとしても使えます)。
Misaki をベースに、記事部分(orgファイル)をemacs本体を使ってhtmlにコンパイルする方式を取っています。 実装にあたっては、misaki-markdown を参考にしました(というかほぼまるパクリですが…)。 Misaki-orgmodeのロゴはイラストレータを使ってイチから作りました(ちょっとバナーが大きかったかも)。 デモサイトはcssフレームワークなどを使用して用意したらよかったかもしれませんが、 シンプルな構成のほうがカスタマイズの自由度が高いと考えあえて採用していません。 また、このブログ自体、Misaki-orgmodeで生成しており、こちらは Pure というCSSフレームワークを使用しています。
本ブログ「ざるだましい」はもともと o-blog というツールを使用していました。 このツールは大変使いやすかったのですが、1ファイルでの運用を強制されるのと、 Clojureプログラミングをしたいという理由からMisakiに乗り換えました。
現状では、Emacsによるインターフェースがないので 記事ファイルが増えた場合は管理が大変ですが、 ゆくゆくは下記で紹介されている org-octopress のようなツールを作りたいと思っています。
 http://quickhack.net/nom/blog/2013-05-01-org-octopress.html  org-modeをブログに利用していみたいかたは一考してみてください。
参考 ざるだましいのロゴに使用しているフォント
 http://www.hogera.com/pcb/font/catalog/  </description>
    </item>
    
    <item>
      <title>Nexus7(2013)にBUNKER RINGを装着する!</title>
      <link>https://zarudama.github.io/posts/nexus72013/</link>
      <pubDate>Mon, 23 Sep 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/nexus72013/</guid>
      <description>主に電子書籍の閲覧に利用していたNexus7ですが、先日新型のNexus7(2013)を購入しました。 正常進化したこのモデル、「これはすごい!」という驚きは少ないですが、サクサク動きますし、画面も綺麗で快適です。 快適さが自然すぎて逆に感動が少ないって感じです。もう旧式には戻れません。
さてタブレットを使っていく上で大抵の人は、なんらかのカバーを装着すると思います。 裸のままだとまず持ちずらいですし、何より落したときの衝撃が怖いですよね。 ただしカバーを装着するとすごくかさばります。もともと薄くて軽いNexus7ですが 重くて厚いカバーなどを装着したらせっかくのスリムな本体が台無しです。
ですからできるだけかさばらずに本体落下のリスクを抑えるアイテムが欲しい。 できることならカバーなしでなんとかしたい。 一見矛盾しているこの欲求を満してくれるのがBUNKER RINGです。
指輪のようなリングを直接本体に貼り付けて使います。 旧式ではこれを購入して利用していました。
カバーなしなので、落したときの衝撃が怖いのですが BUNKER RINGのおかげでまず落しませんし、 かさばって毎日いらいらするのに比べたら このスッキリ感は手放せません。
で、当然Nexus7(2013)でもBUKER RING を同時購入して装着したのですが これがうまくいかない。
新型は、裏面が旧型に比べてツルツルしていて、一見旧型より吸いつきが良いように見えるのですが、 なぜか簡単にはがれてしまうのです。旧型はそんなことなかったのに! なので裸運用は諦めて、カバーごしにBUNKER RINGを装着することにしました。
できるだけ薄くて本体デザインに影響がでないやつがいい。 そこでamazonで良さそうなものを物色して手にいれたのがこれ!
本体に直接貼りつけてたときは、簡単に剥がれてしまったBUNKER RING ですが、 このカバーに対しては、なんども貼り直したにも関わらず、がっちり貼り付きました。
/img/nexus7/basic.jpg
新型は重量が軽くなったせいか、スタンドとして使っても割と安定しています。
/img/nexus7/stand.jpg
ぶらぶらさせても全然平気です。
/img/nexus7/ring1.jpg
/img/nexus7/ring2.jpg
写真ではぶら下げているだけですが、両手を使ってかなり強く引っ張っても剥れる気がしませんでした。
うすーいカバーですので本体落下の衝撃には全く役立ちませんが、 BUNKER RING を貼り付けるためだけに利用するなら逆にこの薄さは利点になります。 BUNKER RING を貼りつけるのに困っているかたはどうぞ。お勧めです!</description>
    </item>
    
    <item>
      <title>ubuntuでxmonadして、emacsでProcessingしてます</title>
      <link>https://zarudama.github.io/posts/ubuntuxmonademacsprocessing/</link>
      <pubDate>Wed, 07 Aug 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/ubuntuxmonademacsprocessing/</guid>
      <description>最近Processingをいじり始めました。
http://mikio.github.io/img/processing/xmonad.png
上の画像は、Ubuntu上のXmonadでemacs使ってProcessingしてるところです。非常に快適です。
ちょろっと作った
&amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;/processings/hello/&amp;quot;&amp;gt;テストプログラム&amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt;  Javascriptモードで出力しました。こんなのが簡単に作れます。
日経LinuxでProcessingの連載をしていたので興味があったのですが、きちんと読んでいませんでした(今読みかえしているところです)。 最大のきっかけとなったのは下記の本を手にしたからです。
&amp;lt;p&amp;gt; &amp;lt;a href=&amp;quot;http://www.amazon.co.jp/gp/product/4798038644/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4798038644&amp;amp;linkCode=as2&amp;amp;tag=ocha04-22&amp;quot;&amp;gt;&amp;lt;img border=&amp;quot;0&amp;quot; src=&amp;quot;http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=4798038644&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=ocha04-22&amp;quot; &amp;gt;&amp;lt;/a&amp;gt;&amp;lt;img src=&amp;quot;http://ir-jp.amazon-adsystem.com/e/ir?t=ocha04-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=4798038644&amp;quot; width=&amp;quot;1&amp;quot; height=&amp;quot;1&amp;quot; border=&amp;quot;0&amp;quot; alt=&amp;quot;&amp;quot; style=&amp;quot;border:none !important; margin:0px !important;&amp;quot; /&amp;gt; &amp;lt;/p&amp;gt;  この本はゲームプログラミングはおろかプログラミングそのものが初めてという人のための本です。 事実、本の帯には「猫でも13歳でもわかる」みたいなことが書いてあります(笑)。 実際本の内容は懇切丁寧に書かれており、猫は無理でも中学生ならゲームが作れそうです。
初心者向けの本とはいえその内容は広範囲で、基本の2Dプログラミング、アイデアの出しかた、 データの作成、Andoroidアプリの公開方法、3Dプログラミング、そしてなんとキネクトプログラミングまでやってます。 自分はプログラミング初心者ではないですが、Processingをざっと勉強したいという経験者にもうってつけだと思います。
特にいいなと思ったのは、プログラマの最大の敵であるゲーム素材のつくり方まで解説してある点です。 プログラマは大抵絵心がなかったりするので、絵や音の素材を用意するのが苦手だと思うのですが、 この本はデータ作成にも多くのページを割いて解説しています。 また、本は分厚いですがそれぞれの章の独立生が割と高いので興味のあるところから読むってのもありかもです。
processing のおすすめポイント processingは実はjavaである。 文法はほとんどJavaなので実はしっかりした言語体系です。自分は最初、Processingという独自のスクリプト言語があるものと勘ちがいしていました。 でも実は、Processingという独自の言語があるわけではなく、Java言語をProcessingというIDEを通して簡単に始められるというものでした。 実際Processingでは普通にArrayListが使えますしジェネリクスも使えます。
Processingをイメージで簡単に説明すると、「Processingという巨大なクラスがあって、 このメソッドがグローバルな関数に見立てたAPIとなっていて、PDEという独自IDEによってあたかもグローバル関数や変数を簡単に定義できるようになっている。 PDEのおかげで、javaのパスとかメインクラスの作成とか面倒なことを考えずすぐに再生ボタンで実行できる環境」ってことになります (間違ってたらすみません)。 なのでJavaを実際に始める前にProcessingから入るというのは非常に有効な手段かと思います。
インストールが超簡単。 ダウンロードして展開するだけです。Java実行環境は同梱されてるので別途インストールする必要がありません。
複数のプラットホームに対応している。 作ったプログラムは、Linux, Mac, Windows向けにエクスポートできます。 出力されたものにJava実行環境も含まれているので配布先に別途Javaをインストールしてもらう必要もありません。
HTMLモード、androidモードがある。 昔のver1.5のころは、エクスポート方法としてアプレットがあったのですが、これはjavascriptに置きかわりました。 JavaAppletはいろいろ問題があるのでこの変更は嬉しいですね。 AndroidのエクスポートもSDKを別途ダウンロードする必要はあるものの非常に簡単にAndroidでプログラムを動かせます。
emacsでprocessing  結局、サポートプラットホームは、Linux、Mac、Windwos、Android、そしてJavascriptになります (ただし最近のゲームライブラリはどれもこの辺サポートしてるのでアピールポイントにはなりにくくなってますね)。 問題は各モードでどこまで差異なく実行できるかですが、この辺はまだ検証できてません。 でも活動が活発なので期待です。 emacsからもProcessingを使えます。下記を参考にしました。 http://hoshi-sano.hatenablog.com/entry/2013/08/03/121526  MELPAに登録されているのでインスールも簡単です。 C-c C-p C-r で実行できますし、 エラーがあれば M-g M-n で簡単ジャンプできます。あとは javascript モードも対応してくれるといいな。</description>
    </item>
    
    <item>
      <title>helmのファイル一覧でパスを表示する</title>
      <link>https://zarudama.github.io/posts/helm-file-list/</link>
      <pubDate>Fri, 14 Jun 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/helm-file-list/</guid>
      <description>helmをアップデートしたら、ファイルの一覧がファイル名のみになってしまい、 パス部分が表示されなくなってしまった。 デフォルトの挙動が変更されたようである。
自分の場合、helm-git.elを使用しているが、 同じリポジトリに同名ファイルが複数あるため、 ファイル名だけになると、どのディレクトリのファイルかがわからなくなってしまう。 これでは困るので調査したところ、ファイル表示部分は、helm本体の =helm-files.el= の機能を流用しており、下記のカスタム変数を定義すればよさそうである。
(defcustom helm-ff-transformer-show-only-basename t &amp;#34;Show only basename of candidates in `helm-find-files&amp;#39;. This can be toggled at anytime from `helm-find-files&amp;#39;with \ \\&amp;lt;helm-find-files-map&amp;gt;\\[helm-ff-run-toggle-basename].&amp;#34; :type &amp;#39;boolean :group &amp;#39;helm-files) .emacsに下記の定義をすることで無事解決できた。
(setq helm-ff-transformer-show-only-basename nil)</description>
    </item>
    
    <item>
      <title>Windowsでmisakiのデモが動かない</title>
      <link>https://zarudama.github.io/posts/windowsmisaki/</link>
      <pubDate>Sat, 04 May 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/windowsmisaki/</guid>
      <description>Clojureで書かれたブログジェネレータの misaki ですが、そのままではWindows上ではサンプルが動作しません。
C:\Users\miki\dev\misaki&amp;gt;lein run samples/blog * Compiling [1mall templates[22m * Compiling [1matom.xml.clj[22m [4mjava.io.FileNotFoundException: samples\blog\public\samples\blog\template\ato m.xml (?w?????p?X?????????????B)[24m at misaki.util.file$write_file / [1minvoke[22m ([31mfile.clj[0m:[31m[1m 152[22m[0m) at misaki.compiler.default.core$compile_STAR_ / [1minvoke[22m ([31mcore.cl j[0m:[31m[1m237[22m[0m) at misaki.compiler.default.core$compile_template / [1minvoke[22m ([31mcore .clj[0m:[31m[1m256[22m[0m) at misaki.compiler.default.core$_compile$fn__1874 / [1minvoke[22m ([31mcor e.clj[0m:[31m[1m70[22m[0m) at misaki.compiler.default.core$_compile / [1minvoke[22m ([31mcore.clj[0m :[31m[1m58[22m[0m) at misaki.core$call_compiler_fn / [1mdoInvoke[22m ([31mcore.clj[0m:[31m [1m55[22m[0m) at misaki.core$compile_STAR_$fn__1112 / [1minvoke[22m ([31mcore.clj[0m:[ 31m[1m160[22m[0m) at misaki.util.sequence$some_with_default_value / [1minvoke[22m ([31mseque nce.clj[0m:[31m[1m44[22m[0m) at misaki.core$compile_STAR_ / [1minvoke[22m ([31mcore.clj[0m:[31m[1m16 7[22m[0m) at misaki.</description>
    </item>
    
    <item>
      <title>firefox の同期不具合</title>
      <link>https://zarudama.github.io/posts/firefox-sync-bug/</link>
      <pubDate>Fri, 03 May 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/firefox-sync-bug/</guid>
      <description>下記のエラーが頻繁に表示される。
「接続中にエラーが発生しました: 不明なエラー。この処理は自動的に再施行されます。」  これの対処方法は、
 「メニュー」→「ツール」→「オプション」→「Syncタブ」 「アカウントを管理ボタン」→「Syncをリセット」  で、もとに戻るはず。
追記 結局もとに戻らなかった。さらにいろいろ調査してみたところ、アドレスバーに下記を入力すると、 syncエラーの原因が読めることがわかった。
about:sync-log 今まで同期エラーがでると、原因を示してくれないので対処のしようがなかったのだけれど、 このログをみれば詳細な情報が手にはいるので大助かり。
自分の場合、ログをみたところ、bookmark同期に原因があった模様。
1368414694893	Sync.Engine.Bookmarks	DEBUG	First sync, uploading all items 1368414694893	Sync.Engine.Bookmarks	INFO	2 outgoing items pre-reconciliation 1368414695441	Sync.Engine.Bookmarks	WARN	Got exception &amp;#34;Component returned failure code: 0x80070057 (NS_ERROR_ILLEGAL_VALUE) [nsINavBookmarksService.getItemType] Stack trace: _buildGUIDMap()@resource://gre/modules/services-sync/engines/bookmarks.js:233 &amp;lt; resource://gre/modules/services-sync/engines/bookmarks.js:357 &amp;lt; _mapDupe()@resource://gre/modules/services-sync/engines/bookmarks.js:313 &amp;lt; _findDupe()@resource://gre/modules/services-sync/engines/bookmarks.js:413 &amp;lt; _reconcile()@resource://services-sync/engines.js:1120 &amp;lt; resource://services-sync/engines.js:903 &amp;lt; resource://gre/modules/services-sync/record.js:625 &amp;lt; Channel_onDataAvail()@resource://gre/modules/services-sync/resource.js:542 &amp;lt; &amp;lt;file:unknown&amp;gt;&amp;#34; building GUID map. Skipping all other incoming items.</description>
    </item>
    
    <item>
      <title>windows版emacs24.3で画像を表示する。</title>
      <link>https://zarudama.github.io/posts/windowsemacs243/</link>
      <pubDate>Fri, 03 May 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/windowsemacs243/</guid>
      <description> Windows版Emacsにおいて、image-diredなどで画像が表示されない場合、下記の方法で表示できる。 F1 v dynamic-library-alist で必要なdllを調べる。 表示されたdllをググッてダウンロードする。 PATHの通った場所へdllを置く。   自分の場合pngが表示されなかったので libpng14-14.dll が表示されたのでこれをググり、下記サイトからダウンロードした。 http://www.gtk.org/download/win32.php emacsを再起動後、 zlib1.dll がないと怒られたので、これもダウンロードして配置。 emacsを再起動し、 M-x image-dired でpng画像を開いたところ無事表示できた。 あとはgifやjpegあたりも同様の手順で準備すればとりあえず困らないだろう。  emacs(Windows版)で画像を表示している様子 /img/image-dired/image-dired.png
w3mでakb48を検索してみた。 /img/image-dired/w3m.png
参考  http://qiita.com/items/dc621c568a294004f5a2 http://stackoverflow.com/questions/2650041/emacs-under-windows-and-png-files  </description>
    </item>
    
    <item>
      <title>ファイルオープン数が上限値に達した</title>
      <link>https://zarudama.github.io/posts/file-open/</link>
      <pubDate>Sat, 02 Mar 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/file-open/</guid>
      <description>CentOSで「too many files」なるエラーが多発したのでその対応策をメモしておく。
 下記を参考にした。 http://thinkit.co.jp/free/tech/23/5 http://www.matsuaz.com/matsumotojs/2010/12/24/1293117835413.html  確認方法 ファイル上限値の確認コマンドは以下。
$ cat /proc/sys/fs/file-nr 1792 0 566699  左から順に 今までにオープンしたことのあるファイルの最大数 現在オープンしているファイルの総数 オープン可能なファイル数の上限 となる。  一時的な設定方法 システム全体 現状のファイルディスクリプタの上限値を確認
$ cat /proc/sys/fs/file-nr 1792 0 566699 一時的にファイルディスクリプタの上限値を変更する。
$ /sbin/sysctl -w fs.file-max = 1234567 設定値の確認
$ cat /proc/sys/fs/file-nr 1216 0 1234567 ユーザ毎(カレントユーザ) 現在のセッション(自分が起動したプロセス)に対して、 ファイルディスクリプタ上限値を設定するには、 ulimit を使用する。
ulimitはユーザに対していろいろな制限を設定するコマンド。 ulimit -a で全ての設定値を確認できる。
$ ulimit -a core file size (blocks, -c) 0 data seg size (kbytes, -d) unlimited scheduling priority (-e) 0 file size (blocks, -f) unlimited pending signals (-i) 114688 max locked memory (kbytes, -l) 32 max memory size (kbytes, -m) unlimited open files (-n) 1024 pipe size (512 bytes, -p) 8 POSIX message queues (bytes, -q) 819200 real-time priority (-r) 0 stack size (kbytes, -s) 10240 cpu time (seconds, -t) unlimited max user processes (-u) 114688 virtual memory (kbytes, -v) unlimited file locks (-x) unlimited ファイルディスクリプタの上限値を設定するには、 ulimit -n N でファイルディスクリプタ上限をN個に変更できる。</description>
    </item>
    
    <item>
      <title>org-modeの段落の改行を削除したい</title>
      <link>https://zarudama.github.io/posts/paragrah-html/</link>
      <pubDate>Sat, 16 Feb 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/paragrah-html/</guid>
      <description>当ブログは、o-blog で運営していて、org-modeで原稿を書いています。 その際、頻繁に fill-paragraph(M-q) を使用するのですが、 これが org-export-as-html すると都合が悪いのです。
どう都合が悪いかというと、段落の文のなかに半角スペースが紛れこんでしまうのです。
例をあげると
今日はいい 天気ですね!  これは、HTMLエクスポートすると
&amp;lt;p&amp;gt;今日はいい 天気ですね!&amp;lt;/p&amp;gt;  となるので、ブラウザ上では
今日はいい 天気ですね!  となり、文の途中に空白文字が挿入されてしまいます。
これはHTMLの仕様なので、変更するのはムズかしそうです。 cssなりorg-modeなりで「pタグの改行は空白にしない」オプションがあればいいのですが、 ざっと見たかぎり見つかりませんでした。1
まあしょうがないので、これからは fill-paragraph(M-q) を使用せず、 1行ごとに改行することにします。
今日はいい天気ですね! そうですね。  これはこうなる。
今日はいい天気ですね!そうですね。  2わかち書きが基本の英語圈でできた仕様だからしかたないのだろうけど、 日本語の文章を書くときは不便だなあ。
 DEFINITION NOT FOUND [return] DEFINITION NOT FOUND [return]   </description>
    </item>
    
    <item>
      <title>python window tiler を試す</title>
      <link>https://zarudama.github.io/posts/python-window-tiler/</link>
      <pubDate>Tue, 29 Jan 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/python-window-tiler/</guid>
      <description>この記事 にxmonadがでてきたので、自分が普段使っているWindowsでもタイル 型マネージャを使いたくなった。実は以前にも何度か試したことがあったが、 どれもキーバインドが好みでなかったり動作が不安定だったりで、いまいち納 得のいくものがなかったので、使っていなかったのだ。でもその時から大分時 間も経ってるので、最近は何かないかなと調べたところPythonで実装されたそ の名もずばり「Python-windows-tiler」というものを見つけた。
 https://github.com/Tzbob/python-windows-tiler http://d.hatena.ne.jp/uhiaha888/20121125/1353824257  使用方法は簡単で、バイナリを解凍してPWT.exeを実行するだけだが、パスに日 本語を含むとエラーになるのでルートに解凍するのが良いと思う。
キーバインディングはAwesomeなどと似ている。ただ、Altキーを使用するので Emacsとキーバインディングが被ってしまうのでconfig.iniを開き、altを全て winにしてPWT.exeを再起動した。
これでとりあえずEmacsとのキーバインディングの回避ができた。めでたしめで たし、と思ったのだが、Win+Lキーでウィンドウの横幅を広げようとしたらロッ ク画面になってしまう。。。
てことでWin+Lを無効化する方法を模索したけど、結局どれもうまくいかなかっ たので横幅操作は封印することにした。てか、Winを使用するコンビネーション キーはどれもWindowsに奪われてしまってうまくイカナイ。。。とはいえ、Win キー経由でタイル操作はとても使いやすい。多様する操作はこれ。
   Win+SPC ウィンドウレイアウトの変更   Win+j, Win+k ALT+TABの代りになる   Win+S+Ent プライマリの切替   Win+数字キー 仮想デスクトップの切替   Win+S+数字キー カレントアプリを仮想デスクトップへ移動    特にWin+j,kがイイ!
自宅のUbuntu環境ではStumpWMを使用していたが、これはEmacserにはなじみの あるキー操作なんだけど(Screen系のプリフィックスキーのあるやつ)、それが 逆に操作の混乱を生んでしまう。というのもの、自分の場合デスクトップの emacsでは windows.el を使用し、端末ではtmuxを使用してるので、タイル型 ウィンドウマネージャのキーバインドにプレフィックスを使用すると混乱する のだ。それにデスクトップのウィンドウ操作はできるだけすばやくしたいので Screen系のStumpWMよりAwesome系のほうがサクサク操作できる。以上から自分 にはAwesome系の操作体系のほうが向いているような気がした。
ということで、Ubuntuではxmonadをもう一度使ってみようと思う。</description>
    </item>
    
    <item>
      <title>.emacsに必要なpackage を指定して自動で各種elispをインストールする</title>
      <link>https://zarudama.github.io/posts/emacspackage-elisp/</link>
      <pubDate>Sun, 06 Jan 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/emacspackage-elisp/</guid>
      <description>今までパッケージ管理には el-get を使用してきたのですが、 Windows環境がメインだと git clone がうまくいかなかったり、 インストール後のビルド工程が失敗したりで、なかなか難儀していたので、 el-getを辞めemacs標準の package.el をメインにすることにしました。
package.el ならば標準装備ですし、サイトリポジトリに各所のelispがダウンロードされた状態なので httpですべてインストールできるので大抵の環境でうまく動きます。
パッケージのリポジトリサイトとしては、昔はMarmaladeが更新が盛んだったのですが、 最近ではMELPAがメインになってきてるようです。なので私は、MELPAメインで使用してます。 Marmaladeは無効にしています。理由は同じパッケージが同時に表示されてしまうからです。
以下は私の設定です。
(require &amp;#39;mikio-util) (when (require &amp;#39;package nil t) ;; Marmalade ;; (add-to-list &amp;#39;package-archives ;; &amp;#39;(&amp;#34;marmalade&amp;#34; . &amp;#34;http://marmalade-repo.org/packages/&amp;#34;)) ;; MELPA ;; (add-to-list &amp;#39;package-archives ;; &amp;#39;(&amp;#34;melpa&amp;#34; . &amp;#34;http://melpa.milkbox.net/packages/&amp;#34;) t) ;; MELPAのみにする。 (setq package-archives (list &amp;#39;(&amp;#34;melpa&amp;#34; . &amp;#34;http://melpa.milkbox.net/packages/&amp;#34;))) ;;インストールするディレクトリを指定 (setq my-package-directory (mikio/elisp-home &amp;#34;package&amp;#34;)) (mikio/make-directory my-package-directory) (setq package-user-dir (concat my-package-directory &amp;#34;/&amp;#34;)) ;;  (package-initialize) (setq my-packages &amp;#39;(undo-tree helm auto-complete popwin smartrep color-moccur yasnippet helm-git helm-gtags helm-c-moccur helm-c-yasnippet paredit ruby-mode php-mode js2-mode web-mode nrepl nrepl-ritz ac-nrepl ;;ac-slime magit jaunte rainbow-delimiters ;; window manager by kiwanami window-layout e2wm twittering-mode ;;o-blog evil )) (require &amp;#39;cl) (mapcar (lambda (x) (when (not (package-installed-p x)) (package-install x))) my-packages) ) (provide &amp;#39;mikio-package)  githubはこちら。 https://github.</description>
    </item>
    
    <item>
      <title>cygwin経由で表示したtmuxの分割罫線が表示崩れする</title>
      <link>https://zarudama.github.io/posts/cygwintmux/</link>
      <pubDate>Sun, 06 Jan 2013 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/cygwintmux/</guid>
      <description>最初Cygwinのバージョンが古いからかなと思ってバージョンアップしても改善 せず、ならばとtmuxのバージョンを最新にしても直らず、結局cyg-terminalの オプションでTextの設定を下記のように変更したら、表示崩れが解消した。
変更前 Locale:JA_jp CharacterSet:UTF-8 変更後 Locale:C CharacterSet:UTF-8  </description>
    </item>
    
    <item>
      <title>Ubuntu Server インストール時に前回作ったLVMが削除できなかった。</title>
      <link>https://zarudama.github.io/posts/ubuntu-server-lvm/</link>
      <pubDate>Sun, 30 Dec 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/ubuntu-server-lvm/</guid>
      <description>Ubuntu Serverをインストールし直したとき、前回作ったLVMを再構成しようとしたら VGやLVMが削除できなくて先に進めなくなった。
この状態を回避するには、 まず ALT+F2 でコンソールを切り替える。 Ubuntu Serverでは仮想コンソールが複数立ちあがっていて、 ALT + F1 - F4 で切り替えられるのだ。
まず、論理ボリュームを削除し、その後、ボリュームグループを削除する。
$ lvremove /dev/{ボリュームグループ}/{論理ボリューム} $ vgremove /dev/{ボリュームグループ} で削除できる。 この時、swap領域に割り当てたものが削除できない場合があるが その時は、いったんインストール作業を中断してやり直せばよい。</description>
    </item>
    
    <item>
      <title>eshell上でリダイレクトした結果が文字化け</title>
      <link>https://zarudama.github.io/posts/eshell/</link>
      <pubDate>Sun, 30 Dec 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/eshell/</guid>
      <description>$ git diff &amp;gt; hoge.patch hoge.patchを開くと下記のような制御コードのまじった結果になりpatchとして使用できない。
^[[0m^[[01;32march^[[0m ^[[01;32mcut^[[0m ^[[01;32mdoexec^[[0m ^[[01;32mgettext^[[0m ^[[01;36mksh^[[0m るびきちさんのメルマガ第3号に紹介されていたesh-myparser.elを使って以下のコマンドでおっけー。
$ b git diff &amp;gt; hoge.</description>
    </item>
    
    <item>
      <title>Emacs中毒者に贈るJDEEによるJava開発環境の構築</title>
      <link>https://zarudama.github.io/posts/emacsjdeejava/</link>
      <pubDate>Sun, 23 Dec 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/emacsjdeejava/</guid>
      <description>この投稿は Emacs Advent Calendar 2012 の23日目の記事です。
追記(2013/08/01) いつの間にか本家JDEEがCEDET2.0に対応していました。 emacs24.3にはCEDET2.0が最初から導入されているため、CEDETを別途導入する必要はなくなります。 これによりJDEEの導入がグッっと簡単になりました。
そこで最新のemacs24.3対応ということでもう一度記事の内容を整理しました。 特に理由のない限り、最新のemacsとJDEEを利用するのが良いかと思います。
 また嬉しいことにJDEE(に代わるJavaの開発環境)の開発(議論)がスタートしているみたいです。 今後に期待しましょう。 http://sourceforge.net/mailarchive/message.php?msg_id=30783951  はじめに Java開発といえばEclipse一択なこの時代、どれだけ需要があるかわかりませんが、 Emacs中毒な皆さんはできればEclipseなんか使いたくないですよね？ 私は使いたくないです(笑)。私もご多分にもれず、なんでもEmacsで済ましたい人になってしまったので、 当然JavaもEmacsで開発したくなります。そこでJDEEの環境を構築しようとしたのですが、 JDEEの開発は停止しているせいか、最新のEmacs23や24だとすんなり動きません。
ならばと、malabar-modeも試したのですが、Maven環境を要求してきますし、 なんだか動作がもっさりな上に(JDEEより重い印象)ところどころエラーがでたりしてうまく動きません。
で、やっぱりJDEEがいいということで、苦労の末、 最近やっとemacsによるJava開発環境(JDEE)が構築できたのでその方法をメモしておきます。
今回は、JDEEの導入方法しか解説しませんが、最終的な私のJava開発環境は以下のとおりです。 今ところantベースのプロジェクトでしか使用しておらず、 Mavenベースのプロジェクトでは動作確認してません。
   インポート文の自動生成 JDEE   Javadoc表示 JDEE + w3m   ビルド JDEE + ant   デバッガ JDEE + jdb   REPLぽいもの JDEE(BeanShell)   コードスニペット Yasnippet   タグジャンプ gtags(global)   メソッド補完 helm-jdee-method(拙作)    まだ導入したばかりで検証してないものもあります。 JDEEは「BeanShell(JavaInterpreter) + 大作Elisp拡張」という、 「重い + 重い」の強力タッグです。動作速度については期待しないほうが良いです。 メソッド補完については、Helmで補完するelispを自作しました。</description>
    </item>
    
    <item>
      <title>cygwinでssh接続できない</title>
      <link>https://zarudama.github.io/posts/cygwinssh/</link>
      <pubDate>Sat, 22 Dec 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/cygwinssh/</guid>
      <description>/home/mikio にホームを設定してるのではなく、 c:/Users/mikio にHOMEを設定し てる場合でssh接続すると、下記のように /home/mikio ディレクトリが作成でき ないと怒られてしまう。
$ ssh -v 192.168.10.2 -p 30890 -i ~/.ssh/id_rsa.whitebase OpenSSH_6.1p1, OpenSSL 1.0.1c 10 May 2012 debug1: Connecting to 192.168.10.2 [192.168.10.2] port 30890. debug1: Connection established. Could not create directory &amp;#39;/home/mikio/.ssh&amp;#39;. この場合は、 /etc/passwd の /home/mikio となってるところを、 /cygdrive/c/Users/mikio に書き換えれば良い。
 http://ekawas.blogspot.jp/2007/03/solving-pesky-ssh-issues-in-cygwin.html  しかし今度はpublickeyがパーミッションエラー。
debug1: Authentications that can continue: publickey debug1: Next authentication method: publickey debug1: Trying private key: /cygdrive/c/Users/miki/.ssh/id_rsa.whitabase debug1: No more authentication methods to try.</description>
    </item>
    
    <item>
      <title>howm-modeとorg-modeを同時に使ってみたい。</title>
      <link>https://zarudama.github.io/posts/howm-modeorg-mode/</link>
      <pubDate>Fri, 28 Sep 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/howm-modeorg-mode/</guid>
      <description>しばらくメモ管理は、org-modeのみで運用してきた。 ブログの下書きも blog.orgという1ファイルのみで運用している (これはo-blogというelispが1ファ イルのみのサポートなため。 複数ファイルでの運用方法もあるかもしれないが未確認。 結果、ポケットひとつの原則に従うことになりすごくやりやすい)。
しかしさすがに内容が増えてくると管理がきつくなってくるし、 将来的には Clojure版JykyllのMisakiに移行したいと考えているので、 そろそろhowmにも手を出してみようかなと。
howmにもリンク機能やTODO機能があるが、 これらはorg-modeにもあるのでそのまま継続するとして、 howmに任せたいのはファイル管理。 ファイル自体を意識せずにどんどんメモが取れる環境が理想。
やること  拡張子は.howmと.orgどちらにするか。 →howmの機能は主にファイル管理に使用する予定なのと、改宗したときに.howmだと面倒なので.orgでいく。 →howmディレクトリをつくってその配下のファイルはすべてhome-modeにしたほうがいいのかも。 →.elも.txtも.orgもすべてhowmで管理。だけどタイトルの仕切りは？ 日報をhowmでうまいこと管理したい。 →repotディレクトリとか作る？ orgのtagによるマッチ機能があれば、howmを使う必要もないかも？  影響されたサイト  Evernote vs Emacs+howm+org+Dropbox 完全同意です。evernoteは流行り始めたころは使ってましたが、 emacsとの連携がしづらいのでいつのまにか使わなくなってしまいました。   emacsだけで書上げた書籍…翔泳社「ツイッター情報収集術」のつくり方(2) 執筆環境編【増田(maskin)真樹】 すごいですね。この方のノウハウをぜひ聞いてみたいです。   My life on Emacs org-modeとhowmを同時に使用するというのはこの方の資料を拝見して初めて気づきました。 howmをサンプルプログラムと日報に活用ってところが詳しくしりたいです。   Emacs + Org-mode + howm + MobileOrg + Dropbox でテキスト管理環境を構築した MobileOrgもぜひ活用したいと思っているのですが、まだできてないですね。。。  </description>
    </item>
    
    <item>
      <title>xmonadを試す</title>
      <link>https://zarudama.github.io/posts/xmonad/</link>
      <pubDate>Fri, 28 Sep 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/xmonad/</guid>
      <description>CUIでtmuxを操作してるときの一覧できる快適さをGUIに求めた結果、 自宅のUbuntuにXmonadをいれてみました。
 http://gihyo.jp/admin/serial/01/ubuntu-recipe/0124  タイル型のウィンドウマネージャです。常にウィンドウ全てが一覧されるやつです。 インストールしてみて実感しましたがタイル型はとーっても快適です。 普段からemacsでキーボード操作メインのユーザだったらすぐに気にいるかと思います。 とくにウィンドウ切り替えが Mod+j/k でできるのがイイ! (それに比べて WindowsのALT+tabは左手の手首が死ぬ。。。)
今回、Xmonadというのをインストールしましたが、老舗のawesomeというのも人気があるそうです。 ただXmonadの方が後発である分いろいろブラッシュアップされてるような印象でした。 問題は設定ファイルがHaskellってことですかね。できれば覚えたくないですよね。 いやHaskellは勉強して動かしたことはありますが、 今はLisp系言語を覚え中なので他の言語はできるだけ気にせず脳の負担を増やしたくないのです。 そういう意味で気になるのは、設定フィアルがCommonLispであるstumpwm。そのうち試したいと思います。
しかしタイル型使ってると、UnityとかgnomuShellの動向がどうでもよくなりますな。
インストールメモ $ sudo apt-get install xmonad $ sudo apt-get install dmenu # キーボードランチャー $ sudo apt-get install xmobar # ステータスバー xmorbar用の設定ファイル( ~/.xmobarrc )を作成する。
-- -*- mode:haskell -*- Config { font = &amp;#34;xft:Sans-9:bold&amp;#34; , bgColor = &amp;#34;black&amp;#34; , fgColor = &amp;#34;grey&amp;#34; , position = Top , lowerOnStart = False , commands = [ Run Network &amp;#34;eth0&amp;#34; [&amp;#34;-L&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;-H&amp;#34;,&amp;#34;32&amp;#34;,&amp;#34;--normal&amp;#34;,&amp;#34;green&amp;#34;,&amp;#34;--high&amp;#34;,&amp;#34;red&amp;#34;] 10 , Run Cpu [&amp;#34;-L&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;-H&amp;#34;,&amp;#34;50&amp;#34;,&amp;#34;--normal&amp;#34;,&amp;#34;green&amp;#34;,&amp;#34;--high&amp;#34;,&amp;#34;red&amp;#34;] 10 , Run Memory [&amp;#34;-t&amp;#34;,&amp;#34;Mem: &amp;lt;usedratio&amp;gt;%&amp;#34;] 10 , Run Swap [] 10 , Run Battery [] 600 , Run Com &amp;#34;lsb_release&amp;#34; [&amp;#34;-s&amp;#34;,&amp;#34;-d&amp;#34;] &amp;#34;&amp;#34; 36000 , Run Date &amp;#34;%Y %b %_d(%a) %H:%M:%S&amp;#34; &amp;#34;date&amp;#34; 10 ] , sepChar = &amp;#34;%&amp;#34; , alignSep = &amp;#34;}{&amp;#34; , template = &amp;#34;&amp;lt;fc=#ee9a00&amp;gt;%lsb_release%&amp;lt;/fc&amp;gt; | %cpu% | %memory% %swap% | %eth0% | %battery% }{ %date%&amp;#34; } ~/.</description>
    </item>
    
    <item>
      <title>SKKを導入してみる(WindowsXP)</title>
      <link>https://zarudama.github.io/posts/skkwindowsxp/</link>
      <pubDate>Sun, 09 Sep 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/skkwindowsxp/</guid>
      <description>去年からemacs上の日本語入力にはDDSKKを使い続けているのですが、 emacsの外の世界ではgooglIME(or MOZC)を使用していました。 滅多に外の世界で活動しないため、別にこれで不自由はなかったのですが、 ふと最近のWindwosSKK界隈を調べてみると、今までskkime 一択だったのに クライアントが増えてます!。。。ということでいくつか検証してみて 最終的に下記の組み合わせを使用することにしました。快適!快適ー!
 corvus-SKK(IME) wceSKKServ(辞書サーバー) google-ime-skk(辞書サーバー)  ということで以下に調べた内容をメモしておきます。
corvus-SKK  最近できたらしいWindows用のFEP 辞書が独自形式 取り込みボタンを押したタイミングで辞書が独自形式に変換されるので、これは逆に長所になった。 emacs側のユーザー辞書を直接指定しても別ファイルになるので、クライアント単位で競合せずにすむ。 サーバーがひとつしか使えない wceSKKServであれば、複数の辞書を扱えるので問題なし トリガキーが「M-漢字キー」しかうけつけておらず、「漢字」キーのみでない 独自のサーバ(corvuserv)を使用しているが、まだ完成度が低そう。 StickyShiftが使える! Windows XPのテキストサービスフレームワーク(TSF)が不安定なため、XPでの利用はあまり推奨されない。  「;」によるStickyShiftを実現する方法  設定画面で[位置] タブで下記の設定を施す。  開始：; 代替：なし 送り：なし
SKK日本語入力FEP  軽快な動作を目的とした比較的新しいWindows版SKK。 Windowsアプリを使いやすくするための独自機能が特徴。 SKK-IME1.5改 と同じ作者であり基本理念が引き継がれている。 WindowsXPのテキストサービスフレームワーク(TSF)が不安定なため、XPでの利用はあまり推奨されない。 WindowsXPで使用する場合は、SKK-IME1.5改を使用したほうが良い。  wceSKKServ  wceSKKServというサーバーを使って、ddskkと辞書の共有を図る。 wceSKKServで使用する辞書は、euc-jpしか受付ない模様。 サーバにはユーザ辞書は指定できない。 従って、ddskkで育てた辞書をskkIMEでも利用するということはできない。 どうしてもしたい場合は、コピーしたものを使う。 例えばスタートアップでユーザー辞書をコピーするとか。 サーバを使うメリットとしては、以下がある。 linux環境において辞書を共用することでメモリの節約 予めサーバーとして立ちあげておくことで、起動がスムーズになる サーバー側に複数の辞書を登録することで、クライアント側では、 そのサーバーをひとつ設定するだけで複数の辞書を指定したことになり、設定が楽になる。  google-ime-skk 最近は、GoogleIMEが流行っているので、SKKをこのまま使い続けていいのか若干気の迷いがありましたが、 Google-IME-SKKの存在を知ってその不安もなくなりました。なぜなら、SKKからGoogleの辞書が使えるからです。 この辞書のおかげで、ネットで話題の言葉とかも簡単に変換可能だし、 ローカルの辞書でヒットしなかった場合でも大抵googleIMEが拾ってくれます。
また、Linux上のGoogleIMEであるMOZCの場合、確かネットのデータは反映されないのですが、 このサーバを使えば、その問題も解決します。 スバラシス!
xp環境でのインストール gemを入れてから下記でインストールする。
dos gem install google-ime-skk dos gem install json</description>
    </item>
    
    <item>
      <title>swank-clojureの後継モジュールのnREPLを試してみた</title>
      <link>https://zarudama.github.io/posts/swank-clojurenrepl/</link>
      <pubDate>Fri, 07 Sep 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/swank-clojurenrepl/</guid>
      <description>いつのまにかswank-clojureが非推奨になり、代わりにnREPLというものが推奨されていた。
 https://github.com/technomancy/swank-clojure  This project is no longer under active development. New users are strongly encouraged to try out nrepl.el instead. If you need an advanced debugger, Ritz might be a better fit.  超意訳。「swank-clojureは全然活動してないから、新規のユーザはnrepl.elを強く推奨する。 もしイケテるデバッガが欲しいならRitzがいいかもYO!。」
ということで、el-getでレシピに下記を追加して nrepl.el をインストール。
(:name nrepl :type github :pkgname &amp;#34;kingtim/nrepl.el&amp;#34; ) で lein2.0 で適当にプロジェクトをつくって、 project.clj に下記を追加。
 :dependencies [[org.clojure/clojure &amp;quot;1.4.0&amp;quot;] [org.clojure/tools.nrepl &amp;quot;0.2.0-beta9&amp;quot; ]]  最後に M-x nrepl-jack-in すると、nREPL-Server が起動して、nREPLが起動する。
キーバインドはほとんどSLIMEと同様だし、SLIMEの下記の特徴も実現してるので、これは本格的に移行できる雰囲気。
 シンボルの補完(TABで補完できる) 関数の引数表示(シンボルを打ちこむとミニバッファに自動表示)  ただSLIMEを常用してきたわけではないので足りない機能もまだありそうだけど。 たとえば、</description>
    </item>
    
    <item>
      <title>Firefoxでサイトを開いた時に自動フォーカスされるのを無効化する。</title>
      <link>https://zarudama.github.io/posts/firefox-focus/</link>
      <pubDate>Thu, 06 Sep 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/firefox-focus/</guid>
      <description>Twitter,google,その他多くの検索サイトでは、ページを開くと勝手にフォーカ スが移動して入力待ち状態になる。この挙動は多くの普通の人にとっては操作 性が良くなるんだろうけど、FirefoxのKeysnailでキーボード操作をメインとし ている自分にとっては不便極まりない。
ってことで、この挙動をどうにかするAdd-Onを探していたんだけど、なぜかなかった。
代わりにGireaseMonkey1を使った代替方法が見つかったのでそのスクリプトを使用することにした。
 http://javascripter.hatenablog.com/entry/20080620/1213923411  GreaseMonkeyアドオンをインストールして、下記コードを追加すれば良い。
新規ユーザスクリプトを追加する手順は以下。
 [メニュー]-[ツール]-[GreasMonkey]-[新規ユーザースクリプト]  // ==UserScript== // @name no-focus // @namespace no-focus // @version 1 // @include http* // ==/UserScript= window.addEventListener(&amp;#39;load&amp;#39;, function() { document.activeElement.blur(); this.removeEventListener(&amp;#39;load&amp;#39;, arguments.callee, false); }, false);  コードの意味はよくわかってないから、問題があるかもしれないが、その場合 はその時考えよう。
 Greasemonkeyはchromeにも移植されているので、chromeでも利用できるかもしれない。 [return]   </description>
    </item>
    
    <item>
      <title>削除したはずリモートブランチが、別のリポジトリから見ると削除されていない。</title>
      <link>https://zarudama.github.io/posts/git-repo-delete/</link>
      <pubDate>Wed, 29 Aug 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/git-repo-delete/</guid>
      <description>サーバー上で削除されたリモートブランチは、自動ではローカルリポジトリに反映されない仕様らしい。 http://blog.s21g.com/articles/992 なので、とあるリポジトリで削除したはずのリモートブランチが、別のリポジ トリから見ると生きのこってたりする。 git remote show origin で確認で きる。  $ git remote show origin * remote origin : : refs/remotes/origin/hoge-branch stale (use &#39;git remote prune&#39; to remove) refs/remotes/origin/fuga-branch stale (use &#39;git remote prune&#39; to remove)  この中で stale (use &#39;git remote prune&#39; to remove) とあるのがいらないブランチだ。 stale(腐った)をplue(切り詰める)すれば良い。
まず、確認。
$ git remote prune origin --dry-run Pruning origin URL: gitolite@db72-dictwiki:wsrch * [would prune] origin/hoge-branch * [would prune] origin/fuga-branch 実行。
$ git remote prune origin もう一回確認。なにも表示されなければ多分成功している。</description>
    </item>
    
    <item>
      <title>cygwinでsvn upgradeに失敗する。</title>
      <link>https://zarudama.github.io/posts/cygwinsvn-upgrade/</link>
      <pubDate>Tue, 28 Aug 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/cygwinsvn-upgrade/</guid>
      <description>本格的にcygwinをputty代替として使っていく気になったので、Subversionに関 してもTortoiseSVNからcygwin版のSubversionを使用することにした。
apt-cyg install subversion インストール後、今まで使用していたリポジトリで svn status を実行したら、upgradeしろと言われたので してみたところ、下記のエラーが。
$ svn upgrade svn: E200029: Couldn&amp;#39;t perform atomic initialization svn: E200030: SQLite compiled for 3.7.13, but running with 3.7.3 ぐぐってみたところ、TortoiseSVNがSQLite3を使用しているのが原因のようだっ たので、TortoiseSVNを削除してらリトライ。でも変化せず。
$ sqlite3 SQLite header and source version mismatch 2010-10-08 02:34:02 2677848087c9c090efb17c1893e77d6136a9111d 2012-06-11 02:05:22 f5b5a13f7394dc143aa136f1d4faba6839eaa6dc ソースと実行ファイルでバージョンの不一致がおこっている模様。でもソース からビルドした記憶はないんだけどなぜだろう。 よくわからないので、 apt-cyg find sqlite3 して関連するパッケージを調べて全て削除した。
$ apt-cyg remove libsqlite3-devel libsqlite3_0 odbc-sqlite3 sqlite3 sqlite3-debuginfo Removing libsqlite3-devel Package libsqlite3-devel removed Removing libsqlite3_0 Package libsqlite3_0 removed Package odbc-sqlite3 is not installed, skipping Removing sqlite3 Package sqlite3 removed そして、再インストール。</description>
    </item>
    
    <item>
      <title>puttyをやめて、cygwin Terminalにする</title>
      <link>https://zarudama.github.io/posts/puttycygwin-terminal/</link>
      <pubDate>Mon, 27 Aug 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/puttycygwin-terminal/</guid>
      <description>puttyベースのminntyがいつのまにcygwinに完全統合されて、 Cygwin Terminal というアプリになっていたので「putty + pagent」の組み合わせを やめて、 Cygwin Terminal と ssh-agent を組みあわせてCygwinだけで SSH接続を実現することにした。
その際、screenを導入することにした。screenを導入することによって、起動 の高速化はもちろん、ssh-agentプロセスの共有化ができるので、その都度鍵の 設定をする必要がなくなるからだ。
導入は簡単。
$ apt-cyg install screen 次に設定ファイル。
defencoding utf8 escape ^z^z startup_message off vbell off hardstatus alwayslastline &amp;#34;%w&amp;#34; で端末を利用するときは次の手順で。
$ ssh-agent bash $ ssh-add ~/.ssh/id_dsa $ ssh-add -l # 確認 $ screen $ ssh -A HOST ssh-agentを起動してから、screenすることで毎回ssh-agent とssh-addをする必要がなくなる。
あとは必要に応じて、 C-z c で仮想端末を追加すれば良い。これで、 =Cygwin Terminal= で疑似マルチターミナルが実現できた!</description>
    </item>
    
    <item>
      <title>javapコマンドを使ってみた。</title>
      <link>https://zarudama.github.io/posts/javap/</link>
      <pubDate>Sat, 02 Jun 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/javap/</guid>
      <description>Javaは *.java から *.class を生成するが、これはテキストエディタで閲覧できないバイナリファイルだ。 これをエディタで閲覧できる状態にするには、jdkに標準搭載されているjavapコマンドを使用しすれば良い。
例えばhogeというパッケージにあるFuga.javaがあるとする。
package hoge; public class Fuga { public static void main(String[] args) { System.out.println(&amp;#34;Hello Javap!&amp;#34;); } } これをコンパイルした結果をjavapで見たい時は、以下のようなコマンドを叩けばいい。 このときhoge.Fugaクラスはhoge/Fuga.lcassというディレクトリ構造になければならない。
javap -c hoge.Fuga &amp;gt; Fuga.code Fuga.codeは以下のようになる。
Compiled from &amp;#34;Fuga.java&amp;#34; public class hoge.Fuga { public hoge.Fuga(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V  4: return public static void main(java.lang.String[]); Code: 0: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream;  3: ldc #3 // String Hello Javap!</description>
    </item>
    
    <item>
      <title>Ubuntu 12.04 LTS On ZENBOOK UX21E</title>
      <link>https://zarudama.github.io/posts/ubuntu-1204-lts-on-zenbook-ux21e/</link>
      <pubDate>Sat, 12 May 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/ubuntu-1204-lts-on-zenbook-ux21e/</guid>
      <description>メインで使用していたノートが3年になるのでZENBOOKを買った。 次期モデルの噂も出始めてはいるが、いつになるかもわからないし、欲しいときが買いどきということで購入。
ubuntuもほとんどそのままの状態で大体の機能が使えている。
/img/ubuntu-ux21e-640-480.jpg
 以下を参考にした。 https://help.ubuntu.com/community/AsusZenbook  インストール後の設定は別エントリにまとめている。
事前に2chや価格comで情報収集していたが、感想としてはやはりキーボードの打ちにくさが一番気になった。 他のキーボードを使わずに、このノートだけを使いつづければ、多分慣れてし まって、なんとも思わなくなるんだろう。 けれども自分の場合、会社ではロジクールの打ちやすいキーボードを使用して いるので凄く気になってしまう。。。
つぎにヒンジ。自分が丁度いいと思う角度で止めようと思っても、 自重でトルクがかかってパカっと最大まで開いてしまう。 普段大きな問題となることないが、地味に痛い。ただし固体差もあるだろうか ら大丈夫な人もいるかと思う。
トラックパッドについては言われていたほど誤タッチもなく割と快適。キーボー ドメインの操作のときはF9を押下すればオフにできるしね。
液晶については、視野角が狭く見づらいという意見があったが、自分は特に気にならない。 動画鑑賞メインとかビジュアル系の用途には多分よわいだろう。自分の場合は プログラミングなので大丈夫かと。
バッテリーのもちに関してはまだ計測したわではないのでわからないがあまり 期待できないだろう。もって3時間てところか？
不満が多いエントリになってしまったが、全般としては、かなり満足している。 とても静かだし、薄くて軽い。なによりさくさく動く。
次期モデルは、オプションとしてIPSと高解像度化が図られるとのことだが それに加えてキーボードとヒンジの問題が改善されればかなり使いやすくなると思う。</description>
    </item>
    
    <item>
      <title>emacs &#43; SLIME &#43; node.js &#43; swank-js でemacsからブラウザ上のjavascriptを実行してみる</title>
      <link>https://zarudama.github.io/posts/emacs-slime-nodejs-swank-js-emacsjavascript/</link>
      <pubDate>Thu, 10 May 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/emacs-slime-nodejs-swank-js-emacsjavascript/</guid>
      <description>まず、Windows版のnode.jsをインストールしておく。インストーラなので簡単。 その後、npmでsocket.ioをインストール。
dos&amp;gt; npm install socket.io あとは、swank-jsをインストールする。
下記を参考にWindowsXP環境にインストールした。
 http://e-arrows.sakura.ne.jp/2011/06/connect-to-nodejs-and-chrome-from-emacs.html  上記記事では、本家は更新が止っているとあるが、最近は更新を再開したっぽい。 もろもろバグフィックスがされているようなのでオリジナルからswank-jsを取得した。
 https://github.com/swank-js/swank-js  インストール方法などは表記のとおりすればOKだが、windowsなのでうまくlnコマンドの部分がうまくいかない。 回避方法としてswank-js.elはMarmaladeからインストールした。
M-x packagea-list-packages 下記を選択してixでインスール。
slime-js 0.0.1 installed Slime extension for swank-js. あとは裏でnode swank.jsを走らせて、SLIMEに接続する。
M-x slime-connect 127.0.0.1 4005 その後、repl上で接続したいURLを指定する。
,target-url 次にブラウザ上で下記にアクセスする。
 http://localhost:8009/  その後、repl上で接続する。
,select-remote あとはrepl上で下記を実行するとlocalhost:8009上でjsが実行される。
alert (&amp;#34;hoge&amp;#34;)</description>
    </item>
    
    <item>
      <title>(超個人的)Ubuntuインストール後にやることまとめ</title>
      <link>https://zarudama.github.io/posts/ubuntu-install/</link>
      <pubDate>Sat, 05 May 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/ubuntu-install/</guid>
      <description>Ubuntu12.04LTS版です。
最初にやること ホーム配下のディレクトリリネーム ホーム配下のディレクトリが日本語になっているので早々に英語化する。
LANG=C xdg-user-dirs-gtk-update
update 最初は、メニューがところどころ日本語になっていなかったりする。 なにはともあれアップデートマネージャで最新にアップデートする。
端末の設定 IME起動ショートカットの変更  [Windwoskキー] - [gnome-terminal] [メニュー] - [編集] - [キーボードショートカット]  すべてチェックを外しておく [右上のパネル（キーボード）] - [設定] - [一般] タブ [キーボードショットカット] - [切り替え]  [Zenkaku_Hankaku]だけにする  xmodmapによるキーマッピング 下記を参考にした。 http://d.hatena.ne.jp/kenbeese/20120214/title
~/.Xmodmapを作成する。
keycode 102 = Control_L keycode 100 = Control_L keycode 101 = Shift_L
keycode 66 = Control_L NoSymbol Control_L clear Lock
add Control = Control_L
反映
xmodmap ~/.xmodmap
これにより下記の割り当てになる。
無変換(102)→ctrl 変換(keycode 100)→ctrl カタカナひらがな(101)→shift</description>
    </item>
    
    <item>
      <title>Javaでカンマ区切りの数字を出力する。</title>
      <link>https://zarudama.github.io/posts/java-printf/</link>
      <pubDate>Wed, 02 May 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/java-printf/</guid>
      <description>下記のとおり。
int value = 99999999; String.format(&#34;%1$,3d円&#34;, value); // = 99,999,999円;
 この場合「%1$,3d」が書式になる。 %は書式の開始を示す。 1$は引数のインデックスを示す。ひとつの引数を使い回すときなどに必要。今回の場合はひとつなので無くても良い。 ,は区切りたい文字 3 は区切りたい桁 d は引数が数字(デシマル)を示す。  </description>
    </item>
    
    <item>
      <title>sudoで環境変数を引き継ぎたい</title>
      <link>https://zarudama.github.io/posts/sudo/</link>
      <pubDate>Sat, 10 Mar 2012 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/sudo/</guid>
      <description>sudo でコマンドを実行する際、今現在のログインアカウントの環境変数を引き継いで実行したい。
方法 -Eオプションを追加する。
$ sudo -E ls -la $HOME  -Eは実行したいコマンドの直前に置く。
経過 sudo -u hogeなどで実行すると、sudoを実行したユーザの環境変数が引き継がれない。 昔は、こんなこと考えずに引き継がれてた気がするが、どうやらsudoのバージョンが上がって 仕様変更されたらしい。
 http://arika.org/2009/04/24/sudo-and-env  環境変数を引き継ぐためにはvisudoを使ってsudoersファイルに環境変数を記述するのが 定石のようだが、/etc配下はできるだけ触りたくない。
そこで下記の方法を見つけた。-Eをつけるだけで良いらしい。
 http://d.hatena.ne.jp/Yudoufu/20110326/1301129885  ただし、man sudo しても-Eオプションは何故か載っていなかった。 （manにないだけで実際には使用できる。)
manの最後にver1.6.6とあるのでマニュアルが古いと思われる。 sudo[Enter]で表示されるUsageにはEオプションは存在するので。
別解 -u オプションを使用して別ユーザーとしてsudoを実行したい場合、 そのユーザーの .bashrc や /etc/profile に定義してある設定を使用したい場合がある。 そんなときは、-i オプションを使用すれば良い。
sudo -u taro -i env</description>
    </item>
    
    <item>
      <title>Clojureでゲームプログラミングその1 実験編</title>
      <link>https://zarudama.github.io/posts/clojure1/</link>
      <pubDate>Wed, 09 Nov 2011 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/clojure1/</guid>
      <description>はじめに LispでGAMEつくろうかなと。 最初CommonLispでつくろうかなと思ったけども、現時点でCommonLispとClojure(+Java)を比較したときに 後者のほうが詳しいかなということで、まずはClojureでつくってみて、落ち着いたらCommonLispでもつくってみようかなと。
とりあえず、下記の流れで、画像を表示して動かすところまでチャレンジしてみる。
 ウィンドウ表示 画像表示 メインループの実現 画像移動  もちろん前回インストールしたSLIMEとLeiningenを使って作業しますよ。 ちなみにClojureで「もの」を作るのは初めてなので、ホント手探りです。 しかもClojureでGameプログラミングの情報ってほとんどないんだよな。さて。
ウィンドウ表示 ClojureでのGUIはさっぱりわからんけども、とりあえずJavaのサンプルとかを頼りにウィンドウを表示してみる。
(import (javax.swing JFrame)) (def frame (JFrame. &amp;#34;Clojure SampleGame&amp;#34;)) (doto frame (.setSize 640 480) (.setVisible true)) でた。簡単すぎる！結構感動します。
 初めてのウィンドウ表示!   次は画像を表示してみる。
画像表示 まずは、画像ファイルの読み込みだ。下記のコードをclojureで動かしてみる。
java.awt.image.BufferedImage bimage; image = javax.imageio.ImageIO.read(new java.io.File(&amp;#34;hoge.png&amp;#34;)); 下記の画像を表示してみる。これは昔作ったゲームで使用したものでアニメーションパターンもはいってる。
http://mikio.github.io/img/clojure-game01/gai.png
画像ファイルはプロジェクト直下においてある（REPLを起動したディレクトリ)。 外部ファイルはプロジェクトルートからの相対パスでOKのようである。
(import (java.awt.image BufferedImage)) (import (javax.imageio ImageIO)) (import (java.io File)) (def image (ImageIO/read (File. &amp;#34;gai.png&amp;#34;)))  とりあえずうまく読み込めたっぽいので、ウィンドウに表示してみる。
(import (java.awt Graphics)) (def graphics (.</description>
    </item>
    
    <item>
      <title>(超個人的)Windowsインストール後にやることまとめ</title>
      <link>https://zarudama.github.io/posts/windows/</link>
      <pubDate>Thu, 28 Apr 2011 14:01:39 +0900</pubDate>
      
      <guid>https://zarudama.github.io/posts/windows/</guid>
      <description>ソフトのインストールポリシー  インストーラのないツールは基本的に%HOME%/apps下に展開する。 インストーラものはデフォルト値でインストール %HOME%/shortcutsにショートカットをおいてlauncyで管理 UNIX系(コマンドライン系)のミドルウェアでインストーラーがない場合は%HOME&amp;/opt/下に展開する。  コントロールキーの設定 xp win7  xkeyemacsをつかってcapsキーをctrsキーにする。 Changekeyを使用する(右クリメニューで管理者として実行すること)。 chgkey.exe Dropboxに保存してある。 GUIのキーボードが表示されるので変更する Caps → Ctrl 無変換 → Ctrl 変換 → Ctrl ひらがな → Shift  再起動  Usersディレクトリの作成(XPのみ) 「Link Shell Extension」をインストールして 「c:\」に「C:\Documents and Settings」のディレクトリジャンクションを作り名前を「Users」とする。 これにより c:\Users\というディレクトリができ、Windows7/Vistaと同じような構成になる。
一番最初にインストール  Launcy Firefox Emacs ExpLzh  環境変数の設定  HOME XPの場合:HOME=c:\Users\mikio Windows7の場合:HOME=%USERPROFILE%   HOMEはダブルクォーテーションで囲んではいけない。emacsが起動しなくなる。 HOMEはcygwin,Emacs用、XYZZYHOMEはxyzzy用の環境変数。 ※cygwinでは、HOMEを設定すると、自動的に/home/mikiがc:\mikiにマウントされる。   MAVEN_HOME %HOME%\opt\ XYZZYHOME XYZZYHOME=%HOME%\aps\xyzzy PATH c:\cygwin\bin;   下記は.bashrc側に置くので設定しなくて良い。 JAVA_HOME=%HOME%\opt\ ANT_HOME=  キーボードの入力速度を早める  PATH %PATH%;%HOME%\bin;%MAVEN_HOME%\bin;%HOME%\opt\php-5.</description>
    </item>
    
    <item>
      <title>このサイトについて</title>
      <link>https://zarudama.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zarudama.github.io/about/</guid>
      <description>中の人について このサイトについて  「ざるだま」と申します。 MSXが好きです。現在はウェブ系開発者です。趣味でたまにゲーム作ってます。 昔はプレステのゲームつくってました。 エディタはEmacsが好きだけどEvil使ってます。 最近の開発では、どうしてもお手軽なvscodeがメインになりつつあります…。 自分用の備忘禄です。 Hugoにて構築しました。 記事はEmacsのorg-modeで記述してます。 Hugoが標準でサポートしているので、mdファイルではなくorgファイルを使用してます。 全文検索は「くまくまノート」さまのサイトを参考に実装しました。 Amazonアフィリエイトリンクあります。ご承知おきください。  </description>
    </item>
    
    <item>
      <title>サイト内全文検索</title>
      <link>https://zarudama.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zarudama.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>