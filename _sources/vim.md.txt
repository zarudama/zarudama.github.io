# vim やること
- [ ] w3mがまともに動くようにする。
  - [ ] 検索がyahooなのをgoogleに
- `,,`コマンドで `altenative file` を実行できるようにする。
- [ ] Voomで目次上で編集ができるようにする。
- [ ] pandocのhtmlエクスポートで toc をいい感じにする。

- [x] タブの使い方
- [x] vimgrepの使い方
- [ ] ファイルをまたぐ置換の方法
- [ ] tagジャンプ
- [ ] windowsでxcopyができない
- [ ] キーバインドからコマンド名を調べる方法
- [ ] キーバインドの変更方法
- [x] ファイルのリロード
 :e!
# voom
python3.6.5 で問題なく動いた。

# markdown

ここを参考に
http://yuheikagaya.hatenablog.jp/entry/2015/06/05/000000
- アウトラインは unite の outlineで実現
- 左側に固定で表示する

## ctags の導入
- 下記からダウンロードしてPATHの通ったところに置くだけ。
  http://hp.vector.co.jp/authors/VA025040/ctags/
- vimの実行ファイルと同じ場所位に配置した。

vimorgnizer
===========

インストール
------------

### 旧方式でインストール
https://github.com/hsitz/VimOrganizer/blob/master/INSTALL.txt

### neobundle でインストール
.vimrc に下記を追加

```
NeoBundle 'hsitz/VimOrganizer'
```

vim を起動して :NeoBundelInstall を実行

## calender.vim

http://www.vim.org/scripts/script.php?script_id=52
- calendar.vim をダウンロード
- ~/apps/vim80-kaoriya-win64/vim80/plugin/ にコピー

## NarrowRegion plugin

https://www.vim.org/scripts/script.php?script_id=3075
- NrrwRgn-0.33.vmbをダウンロード
- ファイルを開いてvimから :so % コマンド実行

## `Universal Text Linking` plugin.

https://www.vim.org/scripts/script.php?script_id=293
- utl_3_0a.vba をダウンロード
- ファイルを開いてvimから :so % コマンド実行

## vimrcの修正

下記に付属しているvimrcの内容を自分の.vimrcにコピペ

```
~/.vim/bundle/VimOrganizer/_vimrc
```

これでorgファイルを開けるようになった。
.dotooプラグインよりはるかに軽い。

## todo
- clock in はできるが clock out ができない。

# 折りたたみ
```
zi : 折りたたみの有効無効の切り替え
zf : 折りたたみの作成(範囲選択の開始行と終了行の末尾にマーカーを追加する)
za : 折りたたみの開閉
zA : 折りたたみの再帰的開閉
zd : 折りたたみの削除
zR : バッファ内の全ての折りたたみを開く
zM : バッファ内の全ての折りたたみを閉じる
```
# カスタマイズ
## クリップボードを共有する
gvimrcに下記を追加する。
```
" m-oono
set clipboard=unnamed
```
# netrw

```
:Explorer   現在のバッファでブラウジングを開始（編集中なら水平に分割）
:Explorer!  上と同じ。ただし編集中の場合に垂直分割
:Hexplorer  横方向に分割して下のウィンドウでブラウジングを開始
:Hexplorer! 上と同じ。ただし上のウィンドウでブラウジングを開始
:Vexplorer  縦方向に分割して左のウィンドウでブラウジングを開始
:Vexplorer! 上と同じ。ただし右のウィンドウでブラウジングを開始
:Texplorer  新しいタブでブラウジングを開始

Ret ファイルを開く or ディレクトリを移動する
o   上と同じ。ただし、水平方向に分割する
v   上と同じ。ただし、垂直方向に分割する
t   上と同じ。ただし、新しいタブに表示する
p   上と同じ。ただし、プレビューウィンドウに表示する
–   上の階層へ移動する
u   前にいたディレクトリに戻る（アンドゥ的な）
U   uで戻る前のディレクトリに移動する（リドゥ的な）
c   このバッファのカレントディレクトリを、現在開いているディレクトリに変更
```

# vimgrepの使い方

コマンド
``` bash
:vim[grep] {pattern} {file} ...
```

結果の閲覧方法
``` bash
:cn[ext] 次の結果へ
:cp[revious] 前の結果へ
:cw[indow] QuickFix作成
```

より良いコマンド
``` bash
:vim hoge **|cw
```

.vimrc
```
autocmd QuickFixCmdPost *grep* cwindow
```

## {file}の指定方法
カレントディレクトリ以下のあらゆるファイルを対象にする
```
:vim {pattern} **
```

app/views以下のあらゆるファイルを対象にする（ディレクトリを再帰的に検索）
```
:vim {pattern} app/views/**
```

app/views/users内のファイルを対象にする
```
:vim {pattern} app/views/users/*
```

app/views以下のerbファイルを対象にする
```
:vim {pattern} app/views/**/*.erb
```

app/views以下で\_で始まるerbファイルを対象にする
```
:vim {pattern} app/views/**/_*.erb
```

## {pattern}の指定方法

# 実践vim

## オペレータ

オペレータ＋モーション＝アクション
- オペレーションとは y , c など
- モーションとは、wとか範囲を示すもの

## ドットの公式
一回の移動＋一回の変更
## ノーマルモード
; 移動の繰り返し
, 逆方向の移動の繰り返し
. コマンドの繰り返し
daw 単語を削除(覚えた方 delete a word )
dap 段落を削除
zz カーソル位置を真ん中にする。
e 次の単語の終端へ移動する。
w 次の単語の始端へ移動する。
t コピーする。copy to のtらしい。
C-o 一つ前の場所に戻る？
### バッファリスト
:ls バッファリスト。%が現在選択中のバッファ。#はだいたいバッファ
C-^ 代替バッファに切り替える。
:bnext :bprev バッファリストを前後に移動
:bfirest :blast バッファリストの先頭及び末尾に移動する。
:buffer N :lsで表示された番号に直接移動する。
:buffer {buffername} バッファ名を指定して切り替える。
:bufdo :lsで表示されたすべてのバッファに対してExコマンドを実行する。

vimのリストをサクサク移動するためのキーバインド
``` vimscript
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>
```
### 隠しバッファ
バッファを保存せずに:nextなどのバッファ切り替えをすると警告が表示される。
これを無視して切り替えるには、:next!としてビックリマークをつける。
この時保存していないバッファのことを隠しバッファという。
hidden を設定すると:next!とせずに:nextでバッファを切り替えることができる。
## 分割ウィンドウ
C-w s 水平に分割する。
C-w v 垂直に分割する。
C-w C-w ウィンドウを切り替える。
C-w c アクティブなウィンドウを閉じる。
C-w o アクティブなウィンドウ意外をすべて閉じる。
C-w = すべてのウィンドウを同じ幅と高さにする。
## タブページ
タブはvimではコンテナとイメージしたほうが良い。通常のエディタのタブではないことに留意すること。
:lcd {path} 現在アクティブなウィンドウ用の作業ディレクトリを指定する。
:windo lcd {path} 現在のタブに対して作業ディレクトリを指定する。

:tabe {filename} 新規タブページ
:tabc 現在のタブページとウィンドウを閉じる。
:tabo アクティブなタブページ意外のタブをすべて閉じる。
:tabmove [N] 現在のタブを移動する。Nが0で先頭。省略で末尾。
C-w T 現在のウィンドウを新たなタブページに移動する。

{N}gt 指定した番号のタブに移動する。goto tab {N}
{N}gT 上記の逆

## 挿入モード
C-h バックスペース
C-w 直前の単語を削除
C-u 行頭までを削除

C-o 挿入ノーマルモード。一回だけのマールモードのコマンドを実行できる。
C-r{register} registerの内容をペーストする。registerは通常0.
C-r= 計算式を入力すると計算結果を挿入する。
## ビジュアルモード
v 文字指向ビジュアルモード
V 行指向ビジュアルモード
C-v ブロック指向ビジュアルモード
それぞれもう一度押すことでノーマルモードにトグルする。

gv 直前のビジュアルな選択範囲を再度選択する。
o 選択範囲のもう一方に移動する。
select from here to here.
## コマンドモード
### 基本形式
:[renge]コマンド

### rengeは以下の形式
:{start},{end} 範囲を行番号で示すことができる。
### 特殊な記号
. 現在行
$ 最終行
% すべての行

例）
:.,$p => .は現在行、＄は最後の行、pはprintコマンド
:%p => ファイルのすべての行を表示する。

### コピー(:t)コマンドの例
:{コピーしたい行番号}t{コピー先の行番号}
:6t.
6行目を現在行の下にコピー
:t6
現在行を 6 行目の下にコピー
:t.
現在行をコピー（ノーマルモードの
yyp
に相当）
:t$
現在行をファイル末尾にコピー
:’<,’>t0
ビジュアルな選択範囲をファイル先頭にコピー

### 移動(:m)コマンドの例
使い方は、コピーコマンドと同じ。tをmにするだけ。
### ノーマル(:normal)コマンドの例
:%normal A;
すべての行に対して末尾にセミコロンを追記する。

:%normal i//
すべての行に対して先頭にコメントを挿入する。
※normalコマンドは各行にコマンドを実行する前に先頭に移動するため。
### 補完
tab 順に候補を保管する。
C-d 補完後方を一覧表示する。

下記を設定すると、C-p,C-nで候補を選択できる。
``` bash
set wildmenu
set wildmode=full
```
### 特殊なキー操作
C-r C-w カーソル位置にあるwordをコマンドラインにコピー&ペーストする。
C-r Ca だと選択する対象がwordではなくWORDになる。

C-u 行の先頭まで削除
C-w 前の単語を削除

### 履歴
書きを設定して履歴するバッファを200こぐらいまでにしたほうがよい。
``` bash
set history=200
```
履歴では例えば:help と入力してから上下キー押下するとhelpに関するものだけをフィルタしてくれる。
C-p,C-nでも履歴を辿れるが、この場合フィルタが聞かない。フィルタを聞くようにするためには下記の設定が必要になる。
``` bash
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
```

### コマンドラインウィンドウ
コマンドの履歴を編集することができる。

q: ノーマルモードから起動する。
q/ ノーマルモードから検索履歴を含めて起動
C-f コマンドラインから起動
Enter コマンド実行
:q 終了

### シェルコマンド
:!{cmd} シェルコマンドcmdを実行する。
:!ruby % %は現在実行中のファイル名としてコマンドに渡すことができる。
:read !{cmd} 現在のバッファにコマンド出力の内容を挿入する。
:write !{cmd} 現在のバッファの内容をコマンドの標準入力に送る。
:[range]!{filter} 範囲を指定してコマンドを実行することでフィルタとして使用できる。

ソートコマンドをフィルタとして活用する例
下記のCSVファイルの場合。
``` csv
first name,last name,email
jane,doe,jane@example.com
drew,neil,drew@vimcasts.org
john,smith,john@example.com
```
:2,$!sort -t',' -k2
1行目はヘッダなので2行目から最後までを2,$で指定。
csvなので-tオプションでデリミタを指定、2列めのフィールドでソートしたいので-kオプションで2を指定。

# 文字化け
vimの文字コードを確認
:set enc?

ファイルの文字コードを確認
もし「latin1」という値が帰ってきたら、ファイルを開く際の判別に失敗している。
失敗する原因は、set fileencodingsに正しい値が設定されていないため。
:set fenc?

文字コードを指定して、ファイルを開き直す。
:e ++enc=uec-jp

エンコードを指定する。
:set fenc={文字コード}

文字コードを正しく認識できるように.vimrcに下記を追記しておく。
set encoding=utf-8
set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8
set fileformats=unix,dos,mac

## 参考
http://www-creators.com/archives/1486

# 設定ファイル

``` vimscript
set nocompatible
set number
set ignorecase
syntax on
hi Comment ctermfg=2

" vimの内部文字コード
set encoding=utf-8

" ファイルを読み込む時の文字コード
set fileencodings=utf-8,cp932,euc-jp,sjis

" ファイルを保存する時の文字コード
"set fileencoding=utf-8

```
- =set nocompatible= は、vimとして起動させる。
- =set number= は、行番号表示指定。
- =set ignorecase= は、検索時に大文字小文字を無視する指定。
- =syntax on= は、構文表示をカラフルにする指定。
- =hi Comment ctermfg=2= は、コメントの色がデフォルトだと見ずらいので、黄色にする指定。

# 基本
{count}{operator}{motion}
count:数字を入力
opertator:y,dなどオペレータコマンド
motion:^,$などの移動コマンド
## オペレータ
- 2回連打することで、オペレータの有効範囲が行になる。
- 数指定で繰り返し指定。
- モーションのあとに押下で、その範囲に対しての指定になる
# カーソル移動
```
+: 下の行の先頭に移動
-: 上の行の先頭に移動
$: 行末
0 or | :カーソル行の先頭へ移動
^ or _ :カーソル行の先頭文字へ移動
G:最終行へ移動
H:最上行
M:中央行
L:最下行

w:次の単語の先頭に移動(記号で止まる)
W:次の単語の先頭に移動(記号で止まらない)

e:次の単語の末尾に移動(記号で止まる)
E:次の単語の末尾に移動(記号で止まらない)

b:前の単語の先頭に移動(記号で止まる)
B:前の単語の先頭に移動(記号で止まらない)

%:対応する括弧に移動

{,}: 段落単位で移動

ma:aレジスタに現在のカーソル位置を記憶
'a:記録されている行に移動
`a:記録されている場所に移動
aは[a-z]で良い。

'':直前移動コマンドで移動した行に移動
``:直前移動コマンドで移動した場所に移動
    # スクロール
C-f :次のページ
C-b: 前のページ

C-d: 半ページ進む
C-u: 半ページ戻る

C-e: 1行進む
C-y: 1行戻る

z-ENTER: カーソル行を最上行へ
z-. : カーソル行を真ん中へ
z-- : カーソル行を最下行へ
```

# 文字の検索

/:文字列を順方向に検索
?:文字列を逆方向に検索
f,F:同じ行にある1文字を検索して移動
t,T:同じ行にある1文字を検索して直前移動
;:1文字検索の左向きの再検索
::1文字検索の右向きの再検索
:noh 検索のハイライトを解除

# 文字の書きかえ
s:カーソル位置の1文字を複数の文字に置き換える。
r:カーソル位置の1文字を別の1文字に置き換える。
R:カーソル位置から順に上書きしていく。
~:カーソル位置の大文字小文字変換

# やり直し
u:やり直し
U:行での全取り消し
C-r:やり直しのやり直し
.:直前のコマンドの再実行

# 操作の記録
qa[操作]:aレジスタに操作を記録。Aの場合は追記。もういちどqで記録終了
@a:aレジスタの操作を再生
@@:直前に再生したレジスタを再生

# 整形
```
>> or <<:カーソル行をシフト
>% or <%:対応する括弧までの行をシフト
>} or <}:対応する段落の行をシフト
```

# 置換

``` bash
:%s/<置換前文字>/<置換後文字>/gc
```
%:すべての行が対象
s:置換を指定
g:各行の全ての文字が対象
c:置換確認する

デリミタは、切り替えられる。
パス名などを変更する際に便利。
``` bash
%s;/var/home;/home;gc
```

hogefuga
hoge

正規表現の場合
``` bash
:s /hoge\(.#\)hoge/huga\1huga/g
```
カッコと後方参照には、バックスラッシュを使用する。

空白をタブにする例
``` bash
:s/ +/    /g
```

# 単語検索
検索したい単語の上で次のキーを押下する。
完全一致： #(#)
部分一致： g#(g#)
括弧内は、上方向へ検索する場合。

# vimで編集すると改行が挿入される問題

## 問題
- tagファイルなどの出力結果に改行がはいると、jsの文字列処理でエラーになることがある。
- diffで改行の有無が表示されてしまう。
## なぜ？
POSIXのテキストファイルの仕様では、最後に改行を入れることが必須。vimは仕様に忠実である。
とはいえ現状では、仕様を無視しているテキストエディタのほうが多いため(emacsもそう)
多勢に合わせる必要がある。

## vim側で改行をなくす方法。
ファイル末尾の改行をとりはずす。
``` bash
:set bin noeol
:wq
```
このとき上記コマンド以外はなにもしないこと。

## 参考
https://github.com/vim-jp/issues/issues/152

